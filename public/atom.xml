<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Erhan BARIŞ (Ruslan Asenov)</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.erhanbaris.com/"/>
  <updated>2018-03-24T09:11:33.491Z</updated>
  <id>http://www.erhanbaris.com/</id>
  
  <author>
    <name>Erhan BARIS</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Pimpl Idiom Nedir?</title>
    <link href="http://www.erhanbaris.com/tr/2018/03/24/Pimpl-Idiom-Nedir/"/>
    <id>http://www.erhanbaris.com/tr/2018/03/24/Pimpl-Idiom-Nedir/</id>
    <published>2018-03-24T09:11:33.000Z</published>
    <updated>2018-03-24T09:11:33.491Z</updated>
    
    <content type="html"><![CDATA[<p>Bir <a href="/tr/2018/03/23/object-oriented-bize-ne-gibi-yenilikler-getirdi/" title="önce ki">önce ki</a> yazıda OO dillerin iddialarından birisinin de kapsülleme özelliğinin olduğunu söylemiştik. Fakat tam olarak c dilinde ki gibi mükemmel bir sonuç elde edemediğimizi ve bunun için access modifiers(public, private, protected) kullanılması gerektiğinden bahsetmiştik. İşin kötü tarafı bunları kullanmak belli bir oranda sorunu çözsede header dosyasında bir düzenleme yaptığınız taktirde bunu referans alan diğer bütün kodlar zincirleme olarak tekrardan derlenmesine neden oluyor. En basitinden bir değişken bile eklemiş olsanız diğer dosyalarında derlenmesi gerekiyor. Eğer merkezi konumda ki bir dosyanızda düzenleme yaptıysanız ve projeniz büyük ise bu gerçektende can sıkıcı oluyor. Bu tarz durumlardan kurtulmak için tam bir yalıtılmışlık sağlamak için bütün görünür olan değişkenlerinizin header dosyasında gizlemeye ihtiyacınız oluyor. Bu soruna çözüm seçeneklerinden birisi <strong>Pimpl Idiom</strong>‘dur.<br>Pimpl Idiom ile kullanmanız gereken bütün private fonksiyon ve değişkenlerinizi başka bir class içerisine taşıyıp sadece cpp dosyası içerisinde tanımlamalarını yapıyorsunuz. Header içerisinde ise sadece horward declaration ile böyle bir sınıfınızın olduğunu belirtiyorsunuz, fakat bunun dışında içeriği konusunda hiçbir bilgi vermiyorsunuz.<br>Örnek olarak aşağıda ki gibi bir sınıfınızın olduğunu varsayalım.<br><script src="//gist.github.com/erhanbaris/b63375f88be3cc1be025b976f55b838a.js?file=AppServer_v1.hpp"></script></p><p>Örnek olarak isteklerin cachelenmesi için bir düzenleme yaptığınız takdirde bunu private olarak eklerseniz önceden de bahsettiğim gibi referanslarında derlenmesi gerekecek.</p><script src="//gist.github.com/erhanbaris/b63375f88be3cc1be025b976f55b838a.js?file=AppServer_v2.hpp"></script><p>Header içerisinde AppServerImpl isminde bir sınıfımızın olduğunu belirttik ve bunu AppServer içerisinde kullandığımızından bahsettik. Diğer bütün private olan şeylerimizin hepsini ortadan kaldırdık.</p><p>Bunu kullanacak olan yazılımcı/firmanın daha fazla bilgi edinmesini istemiyoruz. cpp dosyamız için tanımlamada aşağıda ki gibi olacaktır.<br><script src="//gist.github.com/erhanbaris/b63375f88be3cc1be025b976f55b838a.js?file=AppServer_v2.cpp"></script></p><p>AppServer sınıfı için gerekli bütün private değişkenler ile private methodların hepsini AppServerImpl içerisinde tanımlıyoruz. Ayrıca AppServer pointer bilgisini AppServerImpl sınıfında tanımladım. Bunun nedeni AppServerImpl içerisinde public metod yada değişkenlere erişebilmemi sağlaması içindi.<br>Eğer AppServer genel yapısı üzerinde düzenleme yapmam gerekirse (ki public olanları kast etmiyorum) diğer bütün referans alan kodları derlemem gerekmeyecek.<br>Kodlarını ne kadar gizlerseniz o kadar kolay değişiklikler yapabilir ve zaman kazanırsınız.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Bir &lt;a href=&quot;/tr/2018/03/23/object-oriented-bize-ne-gibi-yenilikler-getirdi/&quot; title=&quot;önce ki&quot;&gt;önce ki&lt;/a&gt; yazıda OO dillerin iddialarında
      
    
    </summary>
    
    
      <category term="pimpl" scheme="http://www.erhanbaris.com/tags/pimpl/"/>
    
      <category term="c++" scheme="http://www.erhanbaris.com/tags/c/"/>
    
      <category term="object-oritented" scheme="http://www.erhanbaris.com/tags/object-oritented/"/>
    
  </entry>
  
  <entry>
    <title>Object Oriented Bize Ne Gibi Yenilikler Getirdi?</title>
    <link href="http://www.erhanbaris.com/tr/2018/03/23/object-oriented-bize-ne-gibi-yenilikler-getirdi/"/>
    <id>http://www.erhanbaris.com/tr/2018/03/23/object-oriented-bize-ne-gibi-yenilikler-getirdi/</id>
    <published>2018-03-22T21:14:41.000Z</published>
    <updated>2018-03-24T09:11:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>Genel olarak bütün dillere baktığımız üç ana kısıma ayrılıyor,</p><ul><li>Structured</li><li>Object Oriented</li><li>Functional</li></ul><p>Ortaya çıkış sürelerine baktığımız zaman birbirlerine oldukça yakın olarak 1950-1960 civarında ortaya çıktı fakat son bir kaç yılda OO dillerin popüleritesi ve genel çevre tarafından görmüş olduu destek diğer bütün yapılara nazaran kat be kat arttı.<br>Özellikle C++, C# ve Java gibi dillerin sunmuş olduğu bu olanaklar programcıların aklını çelmekte kendi içinde bir gruplaşmalara bile sebep olmakta.</p><p>Peki OO dillerin bize tam olarak vaat ettiği nedir? Neden bizim için bu kadar önemli, kolay ve kullanışlılar.<br>Bir çok farklı kişi buna farklı cevaplar verebilir. <strong>Objeleri daha iyi yönetebilmek</strong>, <strong>gerçek dünyayı simule edebilmek</strong>, <strong>daha iyi yapılar oluşturabilmek</strong> vs gibi bu liste uzayıp gider. Fakat OO dillerin aslında çözüm olarak sunduğu şeyler 3 tanedir. </p><ul><li><strong>Encapsulation</strong></li><li><strong>Polymorphism</strong></li><li><strong>Inheritance</strong></li></ul><p>Bu 3 madde şu anda heryerde gözümüze sokulan, sürekli olarak anlatılan ve bize nimetlerinden sürekli olarak bir sihir gibi söz edilen şeyler gerçektende vaat edilkdiği gibi OO diller ile mi birlikte geldi? Bunları sadece OO diller aracılığı ile mi kullanabiliriz? Peki OO diller olmasaydı bunlara ihtiyacımızda olmayacakmıydı?</p><h2 id="Encapsulation"><a href="#Encapsulation" class="headerlink" title="Encapsulation"></a>Encapsulation</h2><p>En basit anlatımıyla sınıf içerisinde ki bilgilerin diğer kullanıcılar ve yapılardan saklanması ve tam bir yalıtılmışlık sağlama olarak tanımlanabilir. Dışarıya sadece bir erişim metodu(function pointer) yada sınıfı(abstract class) verilerek asıl yapının diğer dış erişimlere kapatılarak daha esnek değişiklikler, düzenlemeler yapılmasına imkan vermek için kullanılır. Kodun düzenlenmesi sonrasında o kodu kullanan diğer bütün yapının tekrardan derlenmesinin önüne geçilerek sadece değişikliğin olduğu kısmın derlenmesini sağlamaktır.</p><p>C dili için örnek göstermek gerekirse;<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// animal.h</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">animal</span>;</span></span><br><span class="line"><span class="function">struct animal* <span class="title">create_animal</span><span class="params">(<span class="keyword">int</span> size, <span class="keyword">int</span> kilo)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_information</span><span class="params">(struct animal *)</span></span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// animal.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Animal.h"</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">animal</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> size;</span><br><span class="line">    <span class="keyword">int</span> kilo;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">struct animal* <span class="title">create_animal</span><span class="params">(<span class="keyword">int</span> size, <span class="keyword">int</span> kilo)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">animal</span>* <span class="title">item</span> = (<span class="title">struct</span> <span class="title">animal</span>*)<span class="title">std</span>:</span>:<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct animal));</span><br><span class="line">    item-&gt;kilo = kilo;</span><br><span class="line">    item-&gt;size = size;</span><br><span class="line">    <span class="keyword">return</span> item;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_information</span><span class="params">(struct animal * item)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Kilo: %i, size: %i\r\n"</span>, item-&gt;kilo, item-&gt;size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Animal.h"</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">animal</span>* <span class="title">item</span> = <span class="title">create_animal</span>(50, 40);</span></span><br><span class="line">    print_information(item);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Aynı örneğin C++ ile gösterimi;<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// animal.hpp</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Animal(<span class="keyword">int</span> size, <span class="keyword">int</span> kilo);</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print_information</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> psize;</span><br><span class="line">    <span class="keyword">int</span> pkilo;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// animal.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Animal.hpp"</span></span></span><br><span class="line">Animal::Animal(<span class="keyword">int</span> size, <span class="keyword">int</span> kilo)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;psize = size;</span><br><span class="line">    <span class="keyword">this</span>-&gt;pkilo = kilo;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Animal::print_information()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Kilo: %i, size: %i\r\n"</span>, <span class="keyword">this</span>-&gt;pkilo, <span class="keyword">this</span>-&gt;psize);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Animal.hpp"</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">Animal <span class="title">item</span><span class="params">(<span class="number">50</span>,<span class="number">40</span>)</span></span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Printing as animal\r\n"</span>);</span><br><span class="line">    item.print_information();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Sonuç:<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Printing <span class="keyword">as</span> animal</span><br><span class="line"><span class="string">Kilo:</span> <span class="number">40</span>, <span class="string">size:</span> <span class="number">50</span></span><br></pre></td></tr></table></figure></p><p>Hımmm, sanki c ile c++ arasında çok fark yokmuş gibi görünüyor ama aslında bakacak olursanız c++ sınıf tanımlamasında bazı bilgilerin görünür olduğu anlaşılıyor. Bu da kapsüllemeyi bozan şeylerden birisi. Tabi bunu <strong>pimpl</strong> ile önüne geçilebilir ama genede dışarda bazı bilgileri bırakmış oluyor. Kapsülleme bakımından c, c++ oranla daha başarılı. </p><p>Fakat unutmamak lazım c++ içerisinde public, private ve protected tanımlamaları bu sorunu çözmek için oluşturulmuş ve bunlarla soruna belli bir düzeyde çözüme kavuşturabiliyoruz.<br>OO dillerinin önerdiği kapsülleme zaten uzun bir süreden beri var olan bir özellik.</p><h2 id="Polymorphism"><a href="#Polymorphism" class="headerlink" title="Polymorphism"></a>Polymorphism</h2><p>Kısacası nesnelerin birbiri yerine kullanılabilmesidir. Fark edelim bir elimizde belli bir kaynaktan veri okuyup bunu işleyen bir komuz var. Bu kaynakta bir dosya olsun. Eğer kodunuzu bu dosya formatına göre yazarsanız emin olun günün birinde çıkıpta daha farklı bir dosyadan, belkide bir web sitesinden veriyi okumanızı isteyecek. Bu durumda bir çok yeri değiştirmek yerine daha işin başında sınıfınızı yada işlem yapan metodu soyutlarsanız yeni özellik eklemeniz zahmetsiz olacaktır. Bunuda  interface/abstract sınıf aracılığı ile yada function pointer ile yapmanız gerekmektedir.. OO dil kullananların oldukça aşina olduğu bir durumdur. İşin gerçeği bunu c ilede rahatlıkla yapabilirsiniz.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// myapi.h</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MY_API</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span>(*calc)(<span class="keyword">int</span> a, <span class="keyword">int</span> y);</span><br><span class="line">    <span class="keyword">void</span>(*info)();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">struct MY_API <span class="title">create_sum_calculator</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">struct MY_API <span class="title">create_sub_calculator</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calculate</span><span class="params">(struct MY_API api, <span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// myapi.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"myapi.h"</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a - y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sum_info</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Sum\r\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sub_info</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Sub\r\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">struct MY_API <span class="title">create_sum_calculator</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">MY_API</span> <span class="title">calc</span> = &#123;</span> sum, sum_info &#125;;</span><br><span class="line">    <span class="keyword">return</span> calc;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">struct MY_API <span class="title">create_sub_calculator</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">MY_API</span> <span class="title">calc</span> = &#123;</span> sub, sub_info &#125;;</span><br><span class="line">    <span class="keyword">return</span> calc;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calculate</span><span class="params">(struct MY_API api, <span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    api.info();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"2 + 5 = %i\r\n"</span>, api.calc(<span class="number">2</span>,<span class="number">5</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Animal.h"</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">MY_API</span> <span class="title">sumCalc</span> = <span class="title">create_sum_calculator</span>();</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">MY_API</span> <span class="title">subCalc</span> = <span class="title">create_sub_calculator</span>();</span></span><br><span class="line">    </span><br><span class="line">    calculate(sumCalc, <span class="number">2</span>, <span class="number">5</span>);</span><br><span class="line">    calculate(subCalc, <span class="number">2</span>, <span class="number">5</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Sonuç:<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Sum</span><br><span class="line"><span class="number">2</span> + <span class="number">5</span> = <span class="number">7</span></span><br><span class="line">Sub</span><br><span class="line"><span class="number">2</span> - <span class="number">5</span> = <span class="number">-3</span></span><br></pre></td></tr></table></figure></p><p>Burada da linux çekirdeğinde ki fs.h dosyasından bir kod parçası. Şu an ki versiyonda çok daha uzun.<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">file_operations</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> (*lseek) (struct inode *, struct file *, <span class="keyword">off_t</span>, <span class="keyword">int</span>);</span><br><span class="line">    <span class="keyword">int</span> (*read) (struct inode *, struct file *, <span class="keyword">char</span> *, <span class="keyword">int</span>);</span><br><span class="line">    <span class="keyword">int</span> (*write) (struct inode *, struct file *, <span class="keyword">const</span> <span class="keyword">char</span> *, <span class="keyword">int</span>);</span><br><span class="line">    <span class="keyword">int</span> (*readdir) (struct inode *, struct file *, <span class="keyword">void</span> *, <span class="keyword">filldir_t</span>);</span><br><span class="line">    <span class="keyword">int</span> (*select) (struct inode *, struct file *, <span class="keyword">int</span>, select_table *);</span><br><span class="line">    <span class="keyword">int</span> (*ioctl) (struct inode *, struct file *, <span class="keyword">unsigned</span> <span class="keyword">int</span>, <span class="keyword">unsigned</span> <span class="keyword">long</span>);</span><br><span class="line">    <span class="keyword">int</span> (*mmap) (struct inode *, struct file *, struct vm_area_struct *);</span><br><span class="line">    <span class="keyword">int</span> (*open) (struct inode *, struct file *);</span><br><span class="line">    <span class="keyword">void</span> (*release) (struct inode *, struct file *);</span><br><span class="line">    <span class="keyword">int</span> (*fsync) (struct inode *, struct file *);</span><br><span class="line">    <span class="keyword">int</span> (*fasync) (struct inode *, struct file *, <span class="keyword">int</span>);</span><br><span class="line">    <span class="keyword">int</span> (*check_media_change) (<span class="keyword">kdev_t</span> dev);</span><br><span class="line">    <span class="keyword">int</span> (*revalidate) (<span class="keyword">kdev_t</span> dev);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>Sonuç gösteriyor ki polymorphism’de c dili için sorun değil. Tabi bunu yapabilmek için değişken tanımlamalarımızı aynı sıra ile ve türlerinin de aynı olması gerekiyor. RAM’da her iki nesnenin değişkenleri aynı sırada ve boyutta(türde) olması gerekiyor.<br>Ayrıca c++ arkaplanında buna benzer bir mekanizma kullanmaktadır. Virtual olarak tanımladığınız metodlar vtable(virtual method table) isimli bir yerde tutulur ve çağrım yağtığınızda fonksiyon bilgisi okunarak çalıştırılır. Yani c++ bu işlemleri sizin yerinize otomatik olarak yapar. Bu da hata yapma ihtimalinizi azaltır.</p><h2 id="Inheritance"><a href="#Inheritance" class="headerlink" title="Inheritance"></a>Inheritance</h2><p>Bir nesnenin metod yada değişkenlerinin bir başka nesne tarafından katılım yolu ile alarak kendi içerisinde barındırıyormuş gibi kullanılmasını sağlamak için kullanılmakta. Diğer kısımlarda söylemiş olduğum bu c içerisinde kolaylıkla kullanılabilir durumu ne yazık ki burada yok. Bu konuda farklı yöntemler var ama hiç biri tam olarak OO dillerde ki gibi esneklik sağlamıyor.</p><p>Aşağıda ki yöntem çok tercih edilmesede benzer bir yöntem uygulanabilir.<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// animal.h</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">animal</span>;</span></span><br><span class="line"><span class="function">struct animal* <span class="title">create_animal</span><span class="params">(<span class="keyword">int</span> size, <span class="keyword">int</span> kilo)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_information</span><span class="params">(struct animal *)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dog</span>;</span></span><br><span class="line"><span class="function">struct dog* <span class="title">create_dog</span><span class="params">(<span class="keyword">int</span> size, <span class="keyword">int</span> kilo, <span class="keyword">int</span> age)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_information</span><span class="params">(struct dog *)</span></span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// animal.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"animal.h"</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">animal</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> size;</span><br><span class="line">    <span class="keyword">int</span> kilo;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">struct animal* <span class="title">create_animal</span><span class="params">(<span class="keyword">int</span> size, <span class="keyword">int</span> kilo)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">animal</span>* <span class="title">item</span> = (<span class="title">struct</span> <span class="title">animal</span>*)<span class="title">std</span>:</span>:<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct animal));</span><br><span class="line">    item-&gt;kilo = kilo;</span><br><span class="line">    item-&gt;size = size;</span><br><span class="line">    <span class="keyword">return</span> item;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_information</span><span class="params">(struct animal * item)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Kilo: %i, size: %i\r\n"</span>, item-&gt;kilo, item-&gt;size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dog</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> size;</span><br><span class="line">    <span class="keyword">int</span> kilo;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">struct dog* <span class="title">create_dog</span><span class="params">(<span class="keyword">int</span> size, <span class="keyword">int</span> kilo, <span class="keyword">int</span> age)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">dog</span>* <span class="title">item</span> = (<span class="title">struct</span> <span class="title">dog</span>*)<span class="title">std</span>:</span>:<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct dog));</span><br><span class="line">    item-&gt;kilo = kilo;</span><br><span class="line">    item-&gt;size = size;</span><br><span class="line">    item-&gt;age = age;</span><br><span class="line">    <span class="keyword">return</span> item;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_information</span><span class="params">(struct dog * item)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Kilo: %i, size: %i, age: %i\r\n"</span>, item-&gt;kilo, item-&gt;size, item-&gt;age);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"animal.h"</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">dog</span>* <span class="title">d</span> = <span class="title">create_dog</span>(50, 40, 50);</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">animal</span>* <span class="title">a</span> = (<span class="title">struct</span> <span class="title">animal</span>*)<span class="title">d</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Printing as animal\r\n"</span>);</span><br><span class="line">print_information(a);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Printing as dog\r\n"</span>);</span><br><span class="line">print_information(d);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Sonuç:<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Printing <span class="keyword">as</span> animal</span><br><span class="line"><span class="string">Kilo:</span> <span class="number">40</span>, <span class="string">size:</span> <span class="number">50</span></span><br><span class="line">Printing <span class="keyword">as</span> dog</span><br><span class="line"><span class="string">Kilo:</span> <span class="number">40</span>, <span class="string">size:</span> <span class="number">50</span>, <span class="string">age:</span> <span class="number">50</span></span><br></pre></td></tr></table></figure></p><p>Evet bu o kadarda abstract sınıf kullanmaya benzemiyor. Farklı bir örnek ile devam edelim.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//source.h</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">source</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">source_ops</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> (*get)(<span class="keyword">void</span>* ptr);</span><br><span class="line">    <span class="keyword">void</span>(*put)(<span class="keyword">void</span>* ptr, <span class="keyword">int</span> data);</span><br><span class="line">    <span class="keyword">void</span>(*destroy)(<span class="keyword">void</span>*);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">struct source* <span class="title">create_source</span><span class="params">(struct source_ops* ops, <span class="keyword">void</span>* ptr)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">source_get</span><span class="params">(struct source* s)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">source_put</span><span class="params">(struct source* s, <span class="keyword">int</span> data)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">source_delete</span><span class="params">(struct source* s)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//source.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"source.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">source</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">source_ops</span>* <span class="title">ops</span>;</span></span><br><span class="line">    <span class="keyword">void</span>* data;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">struct source* <span class="title">create_source</span><span class="params">(struct source_ops* ops, <span class="keyword">void</span>* ptr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">source</span>* <span class="title">s</span> = (<span class="title">struct</span> <span class="title">source</span>*)<span class="title">malloc</span>(<span class="title">sizeof</span>(<span class="title">struct</span> <span class="title">source</span>));</span></span><br><span class="line">    s-&gt;data = ptr;</span><br><span class="line">    s-&gt;ops = ops;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">source_get</span><span class="params">(struct source* s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> s-&gt;ops-&gt;get(s-&gt;data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">source_put</span><span class="params">(struct source* s, <span class="keyword">int</span> data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    s-&gt;ops-&gt;put(s-&gt;data, data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">source_delete</span><span class="params">(struct source* s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    s-&gt;ops-&gt;destroy(s-&gt;data);</span><br><span class="line">    <span class="built_in">free</span>(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//tmp_source.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"source.h"</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tmp_source</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span>* datas;</span><br><span class="line">    <span class="keyword">int</span> datas_len;</span><br><span class="line">    <span class="keyword">int</span> index;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">struct source* <span class="title">create_tmp_source</span><span class="params">(<span class="keyword">int</span>* data, <span class="keyword">int</span> len)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">tmp_source_get</span><span class="params">(<span class="keyword">void</span>* ptr)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tmp_source_put</span><span class="params">(<span class="keyword">void</span>* ptr, <span class="keyword">int</span> data)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//tmp_source.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"tmp_source.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">struct source* <span class="title">create_tmp_source</span><span class="params">(<span class="keyword">int</span>* data, <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tmp_source</span>* <span class="title">s</span> = (<span class="title">struct</span> <span class="title">tmp_source</span>*)<span class="title">std</span>:</span>:<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct tmp_source));</span><br><span class="line">    s-&gt;index = <span class="number">0</span>;</span><br><span class="line">    s-&gt;datas = data;</span><br><span class="line">    s-&gt;datas_len = len;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">source_ops</span> <span class="title">ops</span> = &#123;</span></span><br><span class="line">        tmp_source_get,</span><br><span class="line">        tmp_source_put,</span><br><span class="line">        <span class="built_in">free</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> create_source(&amp;ops, s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">tmp_source_get</span><span class="params">(<span class="keyword">void</span>* ptr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tmp_source</span>* <span class="title">t</span> = (<span class="title">struct</span> <span class="title">tmp_source</span>*)<span class="title">ptr</span>;</span></span><br><span class="line">    <span class="keyword">if</span> (t-&gt;index &gt;= t-&gt;datas_len)</span><br><span class="line">        t-&gt;index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> item = t-&gt;datas[t-&gt;index++];</span><br><span class="line">    <span class="keyword">return</span> item;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tmp_source_put</span><span class="params">(<span class="keyword">void</span>* ptr, <span class="keyword">int</span> data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tmp_source</span>* <span class="title">t</span> = (<span class="title">struct</span> <span class="title">tmp_source</span>*)<span class="title">ptr</span>;</span></span><br><span class="line">    <span class="keyword">if</span> (t-&gt;index &gt;= t-&gt;datas_len)</span><br><span class="line">        t-&gt;index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    t-&gt;datas[t-&gt;index++] = data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"source.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"tmp_source.h"</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>* data = (<span class="keyword">int</span>*)<span class="built_in">std</span>::<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * <span class="number">255</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">255</span>; ++i)</span><br><span class="line">        data[i] = i;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">source</span>* <span class="title">s</span> = <span class="title">create_tmp_source</span>(<span class="title">data</span>, 255);</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"item -&gt; "</span> &lt;&lt; source_get(s) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"item -&gt; "</span> &lt;&lt; source_get(s) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"item -&gt; "</span> &lt;&lt; source_get(s) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"item -&gt; "</span> &lt;&lt; source_get(s) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"item -&gt; "</span> &lt;&lt; source_get(s) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"item -&gt; "</span> &lt;&lt; source_get(s) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"item -&gt; "</span> &lt;&lt; source_get(s) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"item -&gt; "</span> &lt;&lt; source_get(s) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Sonuç:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">item -&gt; <span class="number">0</span></span><br><span class="line">item -&gt; <span class="number">1</span></span><br><span class="line">item -&gt; <span class="number">2</span></span><br><span class="line">item -&gt; <span class="number">3</span></span><br><span class="line">item -&gt; <span class="number">4</span></span><br><span class="line">item -&gt; <span class="number">5</span></span><br><span class="line">item -&gt; <span class="number">6</span></span><br><span class="line">item -&gt; <span class="number">7</span></span><br></pre></td></tr></table></figure></p><p>Ana sınıf tanımlaması için farklı bir yöntemde aşağıda.<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">base</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">int</span> y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">derived</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">base</span> <span class="title">base</span>;</span></span><br><span class="line">    <span class="keyword">int</span> z;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">derived</span> <span class="title">d</span>;</span></span><br><span class="line"></span><br><span class="line">    d.base.x = <span class="number">1</span>;</span><br><span class="line">    d.base.y = <span class="number">2</span>;</span><br><span class="line">    d.z = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"x=%i, y=%i, z=%i\r\n"</span>, d.base.x, d.base.y, d.z);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Evet ne kadar çok üzerinde çalışırsak çalışalım tam olarak inheritance mantığını uygulamak kolay olmuyor. Son örneğimizde kapsüllemeden ödün vermek zorunda kaldık. Bu da oldukça önemli bir durum. </p><p>C++ ilk geliştirildiği zaman makine koduna derleme yapmak yerine C diline çıktı verip, c kodu olarak derlenmekteydi. Tabi o zamanlarda ki C++ ve C şu andakinden oldukça farklıydı. Özellikle C++’ın yetkinlikleri oldukça arttı. </p><h3 id="Peki-butun-bunlar-zaten-var-ise-bize-ne-gibi-bir-faydasi-dokundu"><a href="#Peki-butun-bunlar-zaten-var-ise-bize-ne-gibi-bir-faydasi-dokundu" class="headerlink" title="Peki bütün bunlar zaten var ise bize ne gibi bir faydası dokundu?"></a>Peki bütün bunlar zaten var ise bize ne gibi bir faydası dokundu?</h3><ul><li>Öncelikle daha güvenli bir geliştirme ortamı sağladı. Üst kısımda göstermiş olduğum bir çok şeyde hata yapma riski yüksek ve eğer hata yapılırsa bulunmasıda zor.</li><li>Yazılım geliştirmeyi daha kolay hale getirdi.</li><li>Nesneler arasında ki ikişki ve iletişimi daha anlaşılır kıldı.</li><li>Kalıtım sistemini çok daha doğru olarak kullanılmasını sağladı.<br>Eminim ki daha bir çok faydası var fakat hepsini sıralamak olanaksız.</li></ul><p>OO diller bize vaat ettiği kadar yenilik sunmasada sağlamış olduğu esneklik bile kullanımı için yeterli. Her ne kadar c dilinin özelliklerinden bol bol bahsetsemde, şu anda projelerimde yoğun olarak c++ ve c# kullanıyorum. Bir yazılımcı olarak ilk tercihim her zaman OO dillerden birisi olacaktır :)</p><p><strong>NOT: örnek kodlar tamamen test amaçlıdır, memory management yada bug’lar önemsenmemiştir. </strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Genel olarak bütün dillere baktığımız üç ana kısıma ayrılıyor,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Structured&lt;/li&gt;
&lt;li&gt;Object Oriented&lt;/li&gt;
&lt;li&gt;Functional&lt;/li&gt;

      
    
    </summary>
    
    
      <category term="OO" scheme="http://www.erhanbaris.com/tags/OO/"/>
    
      <category term="C" scheme="http://www.erhanbaris.com/tags/C/"/>
    
      <category term="C++" scheme="http://www.erhanbaris.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Sanal Makineler</title>
    <link href="http://www.erhanbaris.com/tr/2018/03/21/Sanal-Makineler/"/>
    <id>http://www.erhanbaris.com/tr/2018/03/21/Sanal-Makineler/</id>
    <published>2018-03-21T07:35:12.000Z</published>
    <updated>2018-03-24T09:13:16.640Z</updated>
    
    <content type="html"><![CDATA[<p>Sanal makineler heryerde. Telefonumuzda, bilgisayarımızda, arabamızda, televizyonumuzda. Heryerde. Hemde düşünüldüğü gibi Vmware, VirtualBox, Hyper-V gibi işletim sistemi sanallaştırma gibi kısıtlı bir alanda değil, daha geniş kesimlerce fark etmeden kullanılıyor. Eğer yazılım geliştiriyorsanız yada yazılım ile uğraşıyorsanız emin olun onu kullanıyorsunuz.<br>Çoğu programlama dili kendi özel sanal makinesi üzerinde işlemler yapmakta. Bunun belkide en çok bilineni JVM’dir. Yazmış olduğunuz Java kodları derleyiciler ile birlikte opcode’lara çevrilir ve bunu Java Sanal Makinesi yorumlayarak sizin programınızı yürütür. Tabi işlem en basit olarak bu şekilde tanımlanabilir. Diğer yandan MSIL’de aynı şekilde sanala makine üzerinde çalışmakta ve yazmış olduğunuz kodlar sanal makine tarafından yorumlanmakta. JVM yada .Net Platformu dışında Python, Ruby, PHP gibi diğer dillerde performans için sanal makine üzerinde işlemler yapmakta fakat JVM ile ayrılabilecek en önemli noktaları JVM’de opcode’lar JIT derleyicisi ile ilk çalıştırma esnasında makine koduna çevrilmekte ve daha yüksek performans sağlamakta. </p><p>Diller genel olarak işlem yürütme mekanizmasına göre 3’e ayrılıyorlar.</p><ol><li>AST ile her işlem için yapı tekrar tekrar çalıştırılır.</li><li>Sanal makineler ile üst düzeyde yazılan kodlar daha hızlı yürütülmek için makine diline benzer ara bir formata çevrilir o şekilde yorumlanır.</li><li>JIT derleyiciler ile yazılan kodlar çalıştırıldığı ilk anda makine diline çevrilir ve o şekilde çalıştırılır.</li><li>Son ve en performanslı olan yöntem ile kodlarımız makine diline çevrilir ve böylece en iyi performansı sağlamış olursunuz.</li></ol><p>İlkinden sonuncusuna doğru gidildiğinde performans ciddi anlamda artar. Çoğu dil ikinci maddede ki gibi sanal makine üzerinden işlem yaptırmakta. Bende şu anda sadece 2. madde ile ilgileniyorum.<br>Sanal makine konsepti kendi içerisinde iki farklı şekilde uygulanıyor. İlki stack tabanlı, ikiniside register tabanlı makineler. Gerçekte buna sanal makineden ziyade sanal cpu olarakta bakılabilir. Assemblr gibi ara bir dile çevirdiğimiz kodları yorumlayarak süreçleri ilerletiyor.<br>Stack ve register tabanlı sanal makinelerin farklarını kısaca özetlersek;</p><ol><li>Stack yapısını oluşturmak ve anlamak yazılımcı için daha kolaydır. Register tabanlı sistemlerde yapıyı kurgulamak daha karmaşıktır.</li><li>Performans olarak register yapısı öne çıkmakta. Bunun nedenide daha az opcode üretilerek daha az işlem ile aynı sonuca ulaşılmaktadır.</li><li>Register tabanlı sistemde daha az komut kodu vardır.</li></ol><h2 id="DEVAM-EDECEK"><a href="#DEVAM-EDECEK" class="headerlink" title="DEVAM EDECEK"></a>DEVAM EDECEK</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Sanal makineler heryerde. Telefonumuzda, bilgisayarımızda, arabamızda, televizyonumuzda. Heryerde. Hemde düşünüldüğü gibi Vmware, Virtual
      
    
    </summary>
    
    
      <category term="Sanal-Makine" scheme="http://www.erhanbaris.com/tags/Sanal-Makine/"/>
    
      <category term="VM" scheme="http://www.erhanbaris.com/tags/VM/"/>
    
  </entry>
  
</feed>
