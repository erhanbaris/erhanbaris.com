<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Erhan BARIŞ (Ruslan Asenov)</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.erhanbaris.com/"/>
  <updated>2018-06-10T19:03:43.368Z</updated>
  <id>http://www.erhanbaris.com/</id>
  
  <author>
    <name>Erhan BARIS</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Keras İle Yüz Tanıma</title>
    <link href="http://www.erhanbaris.com/tr/2018/06/10/Keras-Ile-Yuz-Tanima/"/>
    <id>http://www.erhanbaris.com/tr/2018/06/10/Keras-Ile-Yuz-Tanima/</id>
    <published>2018-06-10T16:40:22.000Z</published>
    <updated>2018-06-10T19:03:43.368Z</updated>
    
    <content type="html"><![CDATA[<p>Artık günümüzde bir çok yapay zeka sorununu python ve zengin kütüphaneleri sayesinde  kolaylıkla çözebiliyoruz. Eskiden oldukça zor ve karmaşık olan çözüm yöntemleri büyük firmaların kullandıkları yapıları açık kaynak kodlu hale getirmeleri ve bir çok gönüllünün bilgi birikimlerini paylaşmaları bu tarz sorunların üstesinden gelmeyi kolaylaştırıyor. Özellikle keras kütüphanesi yeni başlayanlar da dahil olmak üzere bir çok kişi tarafından kullanılıyor. Oldukça kolay ve esnek yapısı sayesinde neredeyse her konuda çözüm üretebiliyor.</p><p>Öğrenme amaçlı olarak beni diğer kişilerden ayırt edebilecek ufak bir fikri ile denemeler yapmaya başladım. Öncelikle 1500 tane fotoğrafımı çekip train ettirdikten sonra kamerada beni tanımasını bekledim. Ne yazık ki beklediğim gibi olmadı. Yazdığım kodu değiştirdim, gene olmadı. Nerede hata yaptığımı düşündüm ve sonradan fark ettim ki beni diğer yüzlerden ayırabilmesi için ben ve diğerlerini bilmesi gerekiyor. Biraz tuhaf bir cümle oldu ama aslında tam olarak bu. Yani benim fotoğraflarımı inceleyip beni tanır iken diğer yüzlerden ne farkımın olduğunu anlaması için diğer insanlarıda incelemesi ve benim farklılıklarımı tespit etmesi gerekiyordu. Bende kendi fotoğraflarımın yanında başkalarınında fotoğraflarını çekip train işlemine soktum. Ve beklediğim gibi beni diğer insanlardan ayırt etmeye başladı.<br>Şimdi gelelim bu işlemler nasıl oldu ve nasıl ilerledim.</p><p>Öncelikle kameradan görüntü almak gerekiyor. Bir çok kütüphane olsada aralarında en iyisi OpenCV birinci tercihim oldu. Fotoğrafları düzenlemek, işlemek için skimage kullanmayı uygun gördüm. sklearn ile gerekli araç gereçler için kullandım ve tabikide tahmin işlemleri için keras kullandım.</p><script src="//gist.github.com/f6846e6a440ac75f3cd0a5024e6e4077.js?file=pip_install"></script><p>Gerekli olan bütün eklentileri kurduğumuza göre artık işlemlerimize devam edebiliriz.<br>Elimizde bir dataset yok ve acil olarak bunu oluşturmamız gerekiyor. Bunun içinde anlık olarak kameradan görüntü alıp bunları kullanabiliriz.<br>İnternette OpenCV ile kameradan görüntü almak için bir çok kod var. Benim ki de onlardan çok farklı değil.</p><script src="//gist.github.com/f6846e6a440ac75f3cd0a5024e6e4077.js?file=OpenCV_camera.py"></script><p>frame bizim fotoğraf değişkenimiz. frame değişkeninin tipi numpy array ve bu bizim bir çok iş yapmaktan kurtaracak. Kameradan aldığımız görüntüleri arka arkaya kayıt ederek dataset oluşturacağız. Bir çok kişiden kayıtlar alıp bunları klasörleyip kullanacağız. Fakat bu fotoğrafların boyutlarının çok büyük olması train işlemini yavaşlatacak ve çıkmaza sokacak bir durum. Tabi elinizde kullanabileceğiniz bir GPU varsa o başka.<br>Fotoğrafları 300 * 300 pixel boyutlarında kullanmayı tercih ediyorum. Kameradan alınan fotoğraflar üzerinde sadece küçültme ve kesme işlemi haricinde bir işlem yapmıyorum.</p><script src="//gist.github.com/f6846e6a440ac75f3cd0a5024e6e4077.js?file=OpenCV_camera_2.py"></script><p>img klasörünün içerisine <strong>erhan</strong>, <strong>aysel</strong>, <strong>ilker</strong>, <strong>bulent</strong>, <strong>omer</strong> ve <strong>guleser</strong> isimli klasörler açarak kamerada bu kişilerin tek tek fotoğraflarını çekiyoruz. Her enter tuşuna basışımızda bir sonra ki kişinin fotoğrafları çekiliyor. Bunları siz istediğiniz gibi düzenleyin.<br>Böylelikle elimizde tam olarak 7500 tane fotoğraf var ve artık asıl işimize geri dönebiliriz.<br>Öncelikle keras’ta Dense layer kullandım ama istediğim sonuçlara bir türlü ulaşamadım. Zaten görüntü işlemede <strong>CNN</strong> oldukça yaygın olarak kullanılan bir teknik. Nöron ağımızı oluşturmaya ve dataset’imizi train ettirmeye artık başlayabiliriz.</p><script src="//gist.github.com/f6846e6a440ac75f3cd0a5024e6e4077.js?file=cnn.py"></script><p><strong>Train on 4410 samples, validate on 1890 samples<br>Epoch 1/2<br>2018-06-10 16:02:31.728099: I tensorflow/core/platform/cpu_feature_guard.cc:140] Your CPU supports instructions that this TensorFlow binary was not compiled to use: AVX2 FMA<br>4410/4410 [==============================] - 313s 71ms/step - loss: 0.3760 - acc: 0.8565 - val_loss: 0.0137 - val_acc: 0.9958<br>Epoch 2/2<br>4410/4410 [==============================] - 307s 70ms/step - loss: 0.0468 - acc: 0.9850 - val_loss: 0.0108 - val_acc: 0.9958<br>2700/2700 [==============================] - 75s 28ms/step</strong></p><p>Test sonuçları oldukça güzel görünüyor.<br><strong>Test Acc : 0.9951851851851852</strong><br><strong>Test Loss : 0.010227037012615863</strong></p><p>Kameradan anlık olarak görüntü alıp bunu kontrol ettirebiliriz. Test sonuçları çok iyi olsada gerçekte bu kadar başarılı olamayabiliyor. Üzeride biraz daha çalışılarak daha iyi sonuçlar elde edilebilir fakat şu an için buna gerek yok.<br>Bulmacanın eksik kalan parçalarınıda koyup kodu toparlamanın zamanı geldi.</p><script src="//gist.github.com/f6846e6a440ac75f3cd0a5024e6e4077.js?file=final.py"></script><p>Üst kısımda yaptıklarımızı biraz daha topladık ve artık çalışan bir kodumuz oldu. Uygulamayı çalıştırdığımızda karenin ortasına kafamızı yerleştirip önce fotoğrafları kayıt ediyoruz sonrasında train işlemi yaplıyor ve bütün bunlar bittikten sonra da kırmızı çizgilerin içerisine kafamızı yerleştirip tahmin etmesini izliyoruz.<br>Bu arada fotoğrafları siyah beyaz olarak kullandığımızı söylemeyi unutmuşm. Zira işleri kısaltmak ve bilgisayarları yormamak istedim.</p><p>Ve bu kadar emeğimizin sonucu :)</p> <img src="/tr/2018/06/10/Keras-Ile-Yuz-Tanima/yuz_tanima.png" title="Keras ile yüz tanıma">]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Artık günümüzde bir çok yapay zeka sorununu python ve zengin kütüphaneleri sayesinde  kolaylıkla çözebiliyoruz. Eskiden oldukça zor ve ka
      
    
    </summary>
    
    
      <category term="deep learning" scheme="http://www.erhanbaris.com/tags/deep-learning/"/>
    
      <category term="keras" scheme="http://www.erhanbaris.com/tags/keras/"/>
    
      <category term="yapay zeka" scheme="http://www.erhanbaris.com/tags/yapay-zeka/"/>
    
      <category term="CNN" scheme="http://www.erhanbaris.com/tags/CNN/"/>
    
  </entry>
  
  <entry>
    <title>IPhone Sniffing ve Uygulama Kandırma</title>
    <link href="http://www.erhanbaris.com/tr/2018/05/27/IPhone-Sniffing-ve-Uygulama-Kandirma/"/>
    <id>http://www.erhanbaris.com/tr/2018/05/27/IPhone-Sniffing-ve-Uygulama-Kandirma/</id>
    <published>2018-05-27T16:09:05.000Z</published>
    <updated>2018-05-27T16:10:02.112Z</updated>
    
    <content type="html"><![CDATA[<p>Eşimin kullanmış olduğu bir sosyal medya aracını merak edip kullanmaya başladım. Tabi benim kullanma amacım tam olarak nasıl çalıştığını ve neler yapılabileceğini anlamak içindi. Fakat uygulama kısa bir süre sonra benden para istemeye başladı ve kullanılamaz hale geldi. Bu oldukça can sıkıcı oldu. Tabi daha tam olarak incelemem bitmediği için tam olarak can sıkıcı bir durum oldu. Sonrasında bu engeli nasıl aşabileceğime yoğunlaştım ve bunlarıda sizlerde paylaşmak istedim.<br>Öncelikle uygulama merkezi bir yer ile irtibata geçip oradan kendini kontrol etmesi gerekiyordu.</p><blockquote><ul><li>Halen beni kullanabilir mi?</li><li>Evet kullanabilir</li></ul></blockquote><p>yada</p><blockquote><ul><li>Halen beni kullanabilir mi?</li><li>Hayır, yeterince denedi, para vermesi lazım</li></ul></blockquote><p>mesajını eğer yakalarsam bir şekilde bunu değiş tokuş esnasında düzenlemeyebilirim diye düşündüm.</p><p>İlk hedefim Ios uygulamasının internette gönderdiği ve aldığı bütün mesajları incelemek olduğuna karar verdim.<br>Internetten <a href="https://www.charlesproxy.com/" title="https://www.charlesproxy.com/" target="_blank" rel="noopener">https://www.charlesproxy.com/</a> uygulamasını indirdim ve IPhone cihazım üzerinde bazı düzenlemeler yapmam gerekti.<br>Kullandığım bilgisayar ve Iphone cihazımı aynı wifi ağında olduğundan emin olduktan sonra Iphone üzerinden</p><ol><li>Ayarlar</li><li>Wifi</li><li>Kablonet(sizin bağlı olduğunu Wifi ağı)</li><li>En altta <strong>Proxy’yi Ayarla</strong></li><li><strong>Elle</strong> seçeneğini seçin ve en alt kısımda ki <strong>Sunucu</strong> kısmına bilgisayarınızın Ip adresini yazın. Benim için bu 192.168.0.14. Kapı(port) kısmınada <strong>8888</strong> bilgilerini girip sağ üst kısımda ki <strong>Kaydet</strong> tuşu ile işlemi bitirdim.</li></ol><p>Kullandığınız proxy uygulaması farklı olabilir ve buna göre port bilgisi farklı olabilir.<br>Artık telefonunuz için ayarlamaları yaptığımıza göre test edebiliriz.<br>Charles Proxy uygulamamızı açıyoruz ve telefonumuzdan <strong>Tags For Insta</strong> isimli uygulamayı açıyoruz. Bu benim üzerinde çalıştığım uygulama, siz kontrol etmek istediğiniz uygulamayı açabilirsiniz.<br>Uygulama açılınca öncelikle olarak google, facebook gibi bir kaç tane siteye bağlandıktan sonra 9brainz.com isimli siteye bağlandı. Evet işte beklediğim bağlantıda buydu. İletişim bilgilerine baktığımda tam olarak aradığım bağlantının olduğu anlaşıldı.</p><p>IPhone üzerinden gönderilen bilgi.<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"deviceId"</span>: <span class="string">"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>9brainz sitesi üzerinden gelen cevap.<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"success"</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">"data"</span>: &#123;</span><br><span class="line"><span class="attr">"deviceId"</span>: <span class="string">"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX"</span>,</span><br><span class="line"><span class="attr">"isRemoveAdsPurchase"</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="attr">"isFreeSearchOver"</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">"isSubscriptionOn"</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="attr">"lastDateOfSubscription"</span>: <span class="string">"18-05-2018"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Sunucuya cihazımın bilgisini gönderiyorum ve o da bana ne kadar süre kullanabileceğimi ve neler yapabileceğim bilgisini dönüyor. Bu oldukça kolay ilerliyor.<br>Şimdi tek yapmam gereken şey 9brainz sunucusundan gelen mesajı istediğim gibi değiştirmek. Bu da kolay bir işlem, çünkü telefonumun bütün internet akışı şu anda bilgisayarım üzerinden gidiyor.</p><p>Öncelikle 9brainz.com domain sunucusunu aradan çıkartmam ve kendi web sunucuma yönlendirmem gerekiyor. Bunun için hosts dosyasını düzenlemem yeterli. Şu anda MacOsX kullanıyorum ve benim hosts dosyam <strong>/etc/</strong> dizini içerisinde. Gerekli yetkileri verip (<strong>chmod +x /etc/hosts</strong>) içerisinde<br><strong>127.0.0.1 9brainz.com</strong><br>satırını ekliyorum.<br>Sırada telefonumdan gelen sorgulamayı karşılayacak olan kodu yazmakta. Ben burada hızlı bir çözüm olması için nodejs ve expressjs kullanmaya karar verdim.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"></span><br><span class="line">app.post(<span class="string">'/InstagramLiveFatih/public/api/loginOrRegister'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123; </span><br><span class="line">    </span><br><span class="line">    res.setHeader(<span class="string">'Content-Type'</span>, <span class="string">'application/json'</span>);</span><br><span class="line">    res.send(<span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line"><span class="string">"success"</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="string">"data"</span>: &#123;</span><br><span class="line"><span class="string">"deviceId"</span>: <span class="string">"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX"</span>,</span><br><span class="line"><span class="string">"isRemoveAdsPurchase"</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="string">"isFreeSearchOver"</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="string">"isSubscriptionOn"</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="string">"lastDateOfSubscription"</span>: <span class="string">"18-05-2020"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">80</span>, () =&gt; <span class="built_in">console</span>.log(<span class="string">''</span>))</span><br></pre></td></tr></table></figure><p>“deviceId”: “<strong>XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX</strong>“ bilgisini Iphone üzerinden gönderilen deviceId ile değiştirmeniz gerekiyor. Sonrasında uygulamayı telefonunuzdan silip tekrar yükleyin ve açın. İlk açıldığı anda sizin bilgisayarınız üzerinden sorgulama işlemi yapıp reklamsız ve sınırsız olarak uygulamayı kullanmanıza olanak sağlayacaktır.<br>Tabi bu işlemler her uygulama için geçerli değildir. Her sorunun kendine özgü bir çözüm yöntemi ve yolu bulunmaktadır. Ben burada sadece kendi yaşadığım sorunda uygulamış olduğum çözüm yöntemini göstermek istedim.<br>Bunlar tamamen öğrenim ve test amaçlıdır. Siz yinede <strong>Tags For Insta</strong> uygulamasının karşılığı olan ücreti ödeyerek kullanının, onlarda kazansın sizde kazanın.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Eşimin kullanmış olduğu bir sosyal medya aracını merak edip kullanmaya başladım. Tabi benim kullanma amacım tam olarak nasıl çalıştığını 
      
    
    </summary>
    
    
      <category term="IPhone" scheme="http://www.erhanbaris.com/tags/IPhone/"/>
    
      <category term="Nodejs" scheme="http://www.erhanbaris.com/tags/Nodejs/"/>
    
      <category term="Sniffing" scheme="http://www.erhanbaris.com/tags/Sniffing/"/>
    
      <category term="charlesproxy" scheme="http://www.erhanbaris.com/tags/charlesproxy/"/>
    
  </entry>
  
  <entry>
    <title>Düşünen Makineler</title>
    <link href="http://www.erhanbaris.com/tr/2018/05/26/Dusunen-Makineler/"/>
    <id>http://www.erhanbaris.com/tr/2018/05/26/Dusunen-Makineler/</id>
    <published>2018-05-25T21:49:29.000Z</published>
    <updated>2018-05-25T21:49:29.047Z</updated>
    
    <content type="html"><![CDATA[<p>Sürekli olarak insanların doğada ki en mükemmel canlı olduklarından ve yapı olarak diğer bir çok canlıya göre üstün olduğunu düşünüyoruz. Kas gücümüz ile bu olmasada bir çok canlıdan zekamız ile fark attığımız bir gerçek. Evrimleşme sürecinde doğa bizi daha zeki ve ve daha saldırgan olmamız için yönlendirdi. Sonucunda da en büyük yırtıcı haline geldik. Bütün bu gelişmeler ile birlikte ellerimizi daha iyi kullanmaya ve el aletleri yapmaya başladık. Öncelikle kendimizi korumak ve avlanmak için zekamızı kullandık ve sonrasında ise bu zekamız ile yaptığımız işleri çok daha kolay hale nasıl getirebiliriz diye düşünerek yenilikler üzerine yoğunlaştık. Çünkü bizler çok çalışmadan çok daha fazla şey elde etmekten hoşlanıyoruz ve bunun için daha çok çabalıyoruz. Bu noktada bizim işlerimizi yapan makineler yapmaya başladık. Önce tarlaları sürmek, çivi çakmak, metale şekil vermek için kullandık sonrasında ise çok daha büyük ölçekte işler yapmak için bunu kullandık. Fabrikalar kurduk ve içlerine önce insanlar ile doldurup herkesi çalıştırdık ama bu da bize yetmedi ve bu seferde insanların yanlarına makineler koyarak verimliliği daha çok arttırmayı başardık. Bu gelişmeler yıllar içerisinde daha iyileşti ve öncesinden çok daha etkili ve verimli makineler yaparak insanlara olan bağımlığı dahada azaltmayı hedefledik. Çünkü biz insanlar fazla karmaşık ve hata yapma riski oldukça yüksek canlılarız ve ne yazık ki kendi fikirlerimiz, duygularımız ve amaçlarımız var. Fakat makinelerin hiç bir duygusu, düşüncesi yok ama tek bir amaçları var. Yapılma anaçlarına uygun olarak bıkmadan usanmadan sürekli olarak aynı şeyleri en iyi şekilde yapabilme kabiliyetleri var ve bu da biz insanlara göre çok daha tercih edilebilir olmalarını sağlıyor. Daha verimli daha kabiliyetli ama duygusuz ve hedef odaklı makineler yapmak her koşulda üretim güclerinin en büyük yardımcısı oldu ve bunu geliştirmek için ellerinden geleni yaptılar ve halende yapmaktalar. İlerleyen zamanlarda da bunun böyle devam edeceğini söylememek içim hiç bir neden yok.</p><p>Sanayi devrimi ile fabrikalarda ki verimlilik hiç olmadığı kadar arttı ve insanlık hiç olmadığı kadar çok ürün üretmeye başladı. Tabi bu beraberinde bazı şeylerde getirdi. Herkese iş imkanı ile başlayan bu serüven sonrasında teknolojik gelişmeler ile daha az insana ihtiyaç duyulmasını beraberinde getirdi ve daha az insan ile daha fazla verimliliğin cazibesi daha çok teknolojik gelişmeleri tetikledi. Sonrasında çarklarla çalışan, basit hesaplamalar yapabilen makineler üretildi. İnsanların yaptığı basit aritmetik işlemleri yapan bu makineler zamanla kendine farklı bir sektör oluşturmaya başlayarak dünyayı hiç olmadığı bir hızla gelişmesinide sağladı. Önceleri basit bir hesap makinesi olarak başlayan yapıları sonrasında çok daha karmaşık işlemleri aynı anda yapabilen ve çok kolaylıkla geliştirilip değiştirilebilen sistemler haline geldi. Farklı sektörler içerisinde kullanılmasıyla faydaları giderek artmaya ve dikkatleri üzerine çekmesiylede hızlı bir şekilde gelişmeye başlayan bu makineler artık günümüzde dört bir köşemizi çevrelemiş durumda.</p><p>İnsanların yapısı gereği bilinçli olarak aynı anda sadece tek bir soruna odaklanıp sadece tek bir sorununa çözüm üretebiliriz. Birden fazla işle aynı anda ilgilenmeye başladığımız da ise verimliliğimiz ciddi olarak düşmekte ve hata yapmaya başlıyoruz fakat makineler aynı anda birden fazla işlem yapabilme kabiliyeti kazandılar ve hata yapma riskleri ne kadar işlem olursa olsun neredeyse yok denecek kadar azdır (tabi geliştiricisinden kaynaklı sorunları saymıyoruz). Hal böyle olunca etrafımız bu cihazlar ile ve bu cihazların etkileri çepe çevrelenmiş durumda. İnsanlık tekrar eden her işlerini, her sorunlarında, her tahminlerinde artık bu makineleri kullanmaya başladı ve eskiden gelen <strong>az iş çok başarı</strong> prensibini de burada devam ettirmeyi sürdürdü. Bütün bu süreçler ile yeni fikirler ortaya atılmaya başlandı. <strong>İnsan gibi düşünebilen makineler!</strong> Bu kulağa yeni birşey gelmiyor, çünkü çok uzun yıllardan beri üzerinde düşünülen ve hedeflenen bir amaç. Bu amaç doğrultusunda uzun senelerdir bir çok çalışma yapıldı ve halen çalışmalar yapılmaya devam edliyor.</p><p>Son yıllarda ki elde edilen başarılarda gösteriyor ki hedeflere belki hiç bir zaman ulaşamasakta ona her geçen gün daha çok yaklaştığımı gösteriyor. Bu gelişmelerinde bizler için sonuçları olacak. Bu sonuçlar sanayi devrimi zamanında olan sonuçlardan çok daha ağır ve yıkıcı olacak gibi görünüyor. Önceden fabrikara yeni makineler konulduğunda onun yerine bir kaç işçi çıkartılırken şu anda ki amaç yeni makineler konularak bütün işçileri işten çıkartmak. Endüstri 4.0 ile aslında hedeflenen insan faktörünün bulunmadığı, sadece yapılan, şikayet etmeyen ve çok az sorun çıkartan makineler ile karı maksimum düzeye ulaştırmak. Geliştirilen her gelişme aslında insanların ellerinde ki işleri belli bir oranda ellerinde almakta ve işsiz kalmalarını sağlamaktadır. <strong>Amazon Go</strong> en canlı örneği olarak karışımızda duruyor. Kasiyer ve güvenlik görevlilerinin olmadığı bir markette alışveriş yapmak oldukça kolay ve hızlı olsada orada önceden çalışan insanların kendilerine yeni iş bulmaları gerekmektedir. İlerleyen yıllarda bu tarz alışveriş yerlerinin yaygınlaşması ile birlikte daha az kasiyere ihtiyaç kalacak ve bunu diğer bir çok meslek dalıda izlemeye devam edecek.</p><p>Birgün beyin ameliyetı olacak olsanız 70 yaşında yaşlı bir doktorun mu sizi ameliyat etmesini isterdiniz yoksa dünayada ki bütün tıp bilgisini bünyesinde barındıran ve oluşabilecek her türlü sorunu çok önceden hesaplayıp çözünlerini çoktan üretmiş olan bir makinenin mi sizi ameliyet etmesini isterdiniz? Belki halen bir insan bakış açısının önüne geçebilecek bir makine olmadığını düşünebilirsiniz ama arada ki fark giderek azalıyor. Hiç bir zaman kızgın olmayan, ailesi ile akşam tartışmamış, yorulmayan ve aynı anda herşeyi kontrol edebilen bir makineye hayatlarını emanet edebilecek çok fazla insan var. Belkide ilerde doktorluk mesleğide yok olacak meslekler arasında olacak. Peki bunun bir sınırı var mı? Yok olmayacak bir meslek var mı? Benim tahminime göre böyle bir onu geliştiren bilim adamlarına kadar her türlü meslek tehlike altında. Bu kısa sürede olacak olan birşey olmasada uzun vadede hayatlarımızı sürdürebilmemiz için daha farklı şeyler yapmamız gerekecek gibi görünüyor.</p><p>Belki bunların hepsi birer hayal yada gerçekleşmeyecek gelecek tahmindir. Sadece kötü bir gelecek seneryasundan başka birşey değildir ve gelecek düşündüğümüzden daha güzel, sağlıklı ve refah içinde olacaktır.<br>Peki ya kötü senaryo gerçekleşirse o zaman hangilerimizin hayatları aynı kalabilecek ?</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Sürekli olarak insanların doğada ki en mükemmel canlı olduklarından ve yapı olarak diğer bir çok canlıya göre üstün olduğunu düşünüyoruz.
      
    
    </summary>
    
    
      <category term="Bilgisayar" scheme="http://www.erhanbaris.com/tags/Bilgisayar/"/>
    
      <category term="Gelecek" scheme="http://www.erhanbaris.com/tags/Gelecek/"/>
    
      <category term="Yapay Zeka" scheme="http://www.erhanbaris.com/tags/Yapay-Zeka/"/>
    
  </entry>
  
  <entry>
    <title>Matematiksel İfadelerin Kod Karşılıkları</title>
    <link href="http://www.erhanbaris.com/tr/2018/05/25/Matematiksel-Ifadelerin-Kod-Karsiliklari/"/>
    <id>http://www.erhanbaris.com/tr/2018/05/25/Matematiksel-Ifadelerin-Kod-Karsiliklari/</id>
    <published>2018-05-25T20:05:28.000Z</published>
    <updated>2018-05-25T20:05:28.852Z</updated>
    
    <content type="html"><![CDATA[<p>Yazılım geliştirmeye başladığımdan beri sürekli olarak matematiksel ifadeler karşıma çıktı. Her seferinde ne olduklarını ve nasıl yazıldıklarını anlamaktan kaçıp onun yerine hazır yazılmış kodları kullanmak her zaman daha kolay geldi. Kodu okumak matematiksel ifadeyi okumaktan çok daha kolay gelmiştir.<br>Bu belkide şu ana kadar matematiği o kadar sevmediğimden kaynalıdır. Bir yazılımcı olarak matematiğe daha fazla önem vermem gerektiğinin farkındayım.<br>Öncelikle basit matematiksel teoremlerin gösterimi ile başlayalım. Ben kolay anlaşılması için örnekleri Python ile yapacağım.<br>Her zaman için uzun ve karmaşık teoriler ile boğuşmaktansa basitten zora giden pratikler üzerinde çalışmak çok daha açıklayıcı ve anlamlı geldi. Bende örneklerimde teori yerine pratikler ile anlatmayı tercih ettim.</p><h1 id="Temel-Islemler"><a href="#Temel-Islemler" class="headerlink" title="Temel İşlemler"></a>Temel İşlemler</h1><table><thead><tr><th style="text-align:center">Python Kodu</th><th style="text-align:center">Matematiksel İfade</th></tr></thead><tbody><tr><td style="text-align:center"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">10</span></span><br><span class="line">j = <span class="number">20</span></span><br><span class="line">x = <span class="number">2</span> * i * j</span><br></pre></td></tr></table></figure></td><td style="text-align:center">$$ i:=10\\ j:=20\\ x:=2ij\\ $$</td></tr><tr><td style="text-align:center"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">abs(<span class="number">-128</span>)</span><br></pre></td></tr></table></figure></td><td style="text-align:center">$$ &#124; -128 &#124; $$</td></tr><tr><td style="text-align:center"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">status = <span class="number">3</span> <span class="keyword">in</span> A</span><br></pre></td></tr></table></figure></td><td style="text-align:center">$$ A = \{ 1, 2, 3, 4, 5, 6 \}, 3 \in A $$</td></tr><tr><td style="text-align:center"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">status = <span class="number">20</span> <span class="keyword">not</span> <span class="keyword">in</span> A</span><br></pre></td></tr></table></figure></td><td style="text-align:center">$$ A = \{ 1, 2, 3, 4, 5, 6 \}, 20 \notin A $$</td></tr><tr><td style="text-align:center"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">print(a[<span class="number">1</span>] * a[<span class="number">2</span>])</span><br></pre></td></tr></table></figure></td><td style="text-align:center">$$ a = \{ 1, 2, 3, 4, 5, 6 \} \\a_1a_2 $$</td></tr></tbody></table><h1 id="Kok-Islemi"><a href="#Kok-Islemi" class="headerlink" title="Kök İşlemi"></a>Kök İşlemi</h1><table><thead><tr><th style="text-align:center">Python Kodu</th><th style="text-align:center">Matematiksel İfade</th></tr></thead><tbody><tr><td style="text-align:center"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line">x = <span class="number">10</span></span><br><span class="line">print(math.pow(math.sqrt(x), <span class="number">2</span>))</span><br></pre></td></tr></table></figure></td><td style="text-align:center">$$(\sqrt{x})^2$$</td></tr><tr><td style="text-align:center"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line">math.sqrt(<span class="number">9</span>) * <span class="number">10</span></span><br></pre></td></tr></table></figure></td><td style="text-align:center">$$ \sqrt{9} * 10 $$</td></tr></tbody></table><h1 id="Fonksiyon"><a href="#Fonksiyon" class="headerlink" title="Fonksiyon"></a>Fonksiyon</h1><table><thead><tr><th style="text-align:center">Python Kodu</th><th style="text-align:center">Matematiksel İfade</th></tr></thead><tbody><tr><td style="text-align:center"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span> * n</span><br></pre></td></tr></table></figure></td><td style="text-align:center">$$ f(n) = 2n $$</td></tr><tr><td style="text-align:center"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> math.pow(n, <span class="number">5</span>) + (<span class="number">4</span> * math.pow(n, <span class="number">2</span>)) + <span class="number">2</span></span><br></pre></td></tr></table></figure></td><td style="text-align:center">$$f(n) = n^5 + 4n^2 + 2 $$</td></tr><tr><td style="text-align:center"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(n, m)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> math.pow(n, m)</span><br></pre></td></tr></table></figure></td><td style="text-align:center">$$f(n, m) = n^m $$</td></tr><tr><td style="text-align:center"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(n, m)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n == m:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> n &gt; m:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure></td><td style="text-align:center">$$\begin{equation} f(n) = \begin{cases} 0 &amp; n = m\\1 &amp; n &gt; m\\ -1 &amp; \text{otherwise} \end{cases}\end{equation}$$</td></tr><tr><td style="text-align:center">Fibonacci fonksiyonu <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> f(n - <span class="number">1</span>) + f(n - <span class="number">2</span>)</span><br></pre></td></tr></table></figure></td><td style="text-align:center">$$\begin{equation} f(n) = \begin{cases} 0               &amp; n = 0\\1               &amp; n = 1\\ f(n-1) + f(n-2) &amp; \text{otherwise} \end{cases}\end{equation}$$</td></tr></tbody></table><h1 id="Toplama-Islemi-Sigma"><a href="#Toplama-Islemi-Sigma" class="headerlink" title="Toplama İşlemi (Sigma)"></a>Toplama İşlemi (Sigma)</h1><table><thead><tr><th style="text-align:center">Python Kodu</th><th style="text-align:center">Matematiksel İfade</th></tr></thead><tbody><tr><td style="text-align:center">1’den 101’e kadar sayıların toplamı <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sum = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">101</span>):</span><br><span class="line">    sum = sum + i</span><br></pre></td></tr></table></figure></td><td style="text-align:center">$$ \sum_{i=1}^{100} i $$</td></tr><tr><td style="text-align:center">1’den 101’e kadar sayıların 2 ile çarpılarak 5 ile toplamının toplamı <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sum = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">101</span>):</span><br><span class="line">    sum = sum + (<span class="number">2</span> * i + <span class="number">5</span>)</span><br></pre></td></tr></table></figure></td><td style="text-align:center">$$ \sum_{i=1}^{100} (2i + 5) $$</td></tr><tr><td style="text-align:center">İç içe iki tane döngünün sayılarının çarpımının toplamı <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sum = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">6</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>):</span><br><span class="line">        sum = sum + (i * j)</span><br></pre></td></tr></table></figure></td><td style="text-align:center">$$ \sum_{i=1}^{5} \sum_{j=1}^{10} ij $$</td></tr><tr><td style="text-align:center">1’den 101’e kadar sayıların toplamının 2. kuvveti <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line">sum = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">101</span>):</span><br><span class="line">    sum = sum + i</span><br><span class="line">print(math.pow(sum, <span class="number">2</span>))</span><br></pre></td></tr></table></figure></td><td style="text-align:center">$$  \Bigg(\sum_{i=1}^{100} i\Bigg)^2 $$</td></tr><tr><td style="text-align:center"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line">sum = <span class="number">0.0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">101</span>):</span><br><span class="line">    sum = sum + (<span class="number">1</span> / math.sqrt(i))</span><br></pre></td></tr></table></figure></td><td style="text-align:center">$$ \sum_{i=1}^{100} \frac{1}{ \sqrt{i}} $$</td></tr><tr><td style="text-align:center"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">sum = <span class="number">0.0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">    sum = sum + a[i]</span><br></pre></td></tr></table></figure></td><td style="text-align:center">$$ a = \{ 1, 2, 3, 4, 5, 6 \} \\ \sum_{i=0}^{99} a_i $$</td></tr><tr><td style="text-align:center"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">x = [<span class="number">1.1</span>, <span class="number">3.4</span>, <span class="number">2.1</span>, <span class="number">0.6</span>, <span class="number">0.4</span>, <span class="number">1.8</span>, <span class="number">4.1</span>]</span><br><span class="line">y = [<span class="number">1.4</span>, <span class="number">4.8</span>, <span class="number">0.4</span>, <span class="number">1.1</span>, <span class="number">1.4</span>, <span class="number">3.5</span>, <span class="number">1.3</span>]</span><br><span class="line"></span><br><span class="line">sum = <span class="number">0.0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(x)):</span><br><span class="line">    sum = sum + math.pow(x[i] - y[i], <span class="number">2</span>)</span><br><span class="line">cost = sum / (<span class="number">2</span> * len(x))</span><br></pre></td></tr></table></figure></td><td style="text-align:center">$$ x = \{ 1.1, 3.4, 2.1, 0.6, 0.4, 1.8, 4.1 \} \\y = \{ 1.4, 4.8, 0.4, 1.1, 1.4, 3.5, 1.3 \} \\ \\Cost = \frac{ \sum_{i=1}^{m} (x_i-y_i)^2}{2m} $$</td></tr></tbody></table><p>Aslında matematik göründüğünden daha basit. Önemli olan gördüğünü okuyabilmek.</p><p><strong>NOT: devamı gelecek…</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Yazılım geliştirmeye başladığımdan beri sürekli olarak matematiksel ifadeler karşıma çıktı. Her seferinde ne olduklarını ve nasıl yazıldı
      
    
    </summary>
    
    
      <category term="Metamatik" scheme="http://www.erhanbaris.com/tags/Metamatik/"/>
    
      <category term="Yazılım" scheme="http://www.erhanbaris.com/tags/Yazilim/"/>
    
      <category term="Python" scheme="http://www.erhanbaris.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>SonOff Basic Wifi Kurulumu</title>
    <link href="http://www.erhanbaris.com/tr/2018/03/25/SonOff-Basic-Wifi-Kurulumu/"/>
    <id>http://www.erhanbaris.com/tr/2018/03/25/SonOff-Basic-Wifi-Kurulumu/</id>
    <published>2018-03-24T21:22:26.000Z</published>
    <updated>2018-03-24T21:23:00.243Z</updated>
    
    <content type="html"><![CDATA[<p>Evde ki prizleri ve ışıkları uzaktan kontrol edilebilir hale getirmek ile ilgili küçük bir düşüncemin sonucunda internetten <strong>SonOff Basic Wifi Smart Swich</strong> isimli devreyi satın aldım.</p><p>Kabloları bağladıktan sonra telefonunuza eWeLink isimli uygulamayı kurmanız gerekiyor. Bu uygulama ile internet üzerinden devreyi açıp kapatabilirsiniz.<br><a href="https://itunes.apple.com/us/app/ewelink-smart-home-control/id1035163158?mt=8" target="_blank" rel="noopener">IOS linki</a><br><a href="https://play.google.com/store/apps/details?id=com.coolkit&hl=tr" target="_blank" rel="noopener">Android linki</a></p><p>Cihazın üzerinde ki tuşa 7 saniye basılı tutun sonra bırakın, tekrardan 7 saniye basılı tutun ve bırakın. Bu işlem sonucunda telefonunuzdan bulunan Wifi listesinde <strong>ITEAD-</strong> ile başlayan bir bağlantı olması gerekiyor. Ona bağlanın ve şifre olarak <strong>12345678</strong> girin.</p><p>Sonra hemen telefonunuzdan uygulamayı açarak en alt kısımda ki yeni ekleme butonuna tıklayın. En altta ki <strong>Compatible Pairing Mode(AP)</strong>‘e tıklayın. Açılan ekranda benim anlattığım şeyleri göreceksiniz. Sonrasında ki <strong>Sonraki</strong> tuşuna tıklayın. Çıkan ekranda modeminizin SSIP ve şifre bilgisini girin ve ilerleyin. Dikkat edin, mazı modemlerde 2.4 Ghz ve 5 Ghz seçenekleri olabiliyor ve iki farklı SSIP oluyor. 2.4 Ghz olanı girmeniz gerekiyor. Sonrada ürün için bir isim girmeniz gerekiyor ve bu işlem sonucunda artık cihazı telefondan kontrol edebilirsiniz. Aynı network üzerinde olmadan ev ağına bağlı olmadanda kontrol edebilirsiniz. Sadece <strong>SonOff</strong>‘un sürekli olarak internete bağlı olması yeterli.</p><p>Ayrıca kendi özel sunucunuzdan erişebilmeniz içinde bazı ayarlamalar yapabilirsiniz.<br>Bilgisayarınızdan önceden söylediğim adımları yaparak cihaza bağlanın. Bağlantı başarılı olup olmadığını kontrol etmek için <strong><a href="http://10.10.7.1/device" target="_blank" rel="noopener">http://10.10.7.1/device</a></strong> linkine girin.<br>Yada komut satırından;<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl <span class="string">http:</span><span class="comment">//10.10.7.1/device</span></span><br></pre></td></tr></table></figure></p><p>Eğer aşağıda ki ne benzer bir sonuç elde ederseniz sorunsuz bağlandınız demektir.</p><script src="//gist.github.com/erhanbaris/588e23f367a8612142fc25359278c4bb.js?file=response"></script><p>data.json dosyası aşağıda ki gibi</p><script src="//gist.github.com/erhanbaris/588e23f367a8612142fc25359278c4bb.js?file=data.json"></script><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -d <span class="string">"@data.json"</span> -X POST <span class="string">http:</span><span class="comment">//10.10.7.1/ap</span></span><br></pre></td></tr></table></figure><p>Böylelikle belirttiğiniz sunucuya tanımlamış oluyorsunuz.<br>Fakat tam bir gün boyunca local server kurup çalıştırmayı denedikten sonra kötü bir haber ile karşılaştım. Kötü haber şu ki SSL doğrulaması yapıyor ve local sunucu ssl’i doğrulanmadığından dolayı bağlanamıyor. Bununla ilgili bir çok kişi talepte bulunulmuş ve nisan ayında bu konuda düzenleme yapılacağı söylenmiş. O zamana kadar eWeLink uygulamasını kullanmaya zorunluyuz.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Evde ki prizleri ve ışıkları uzaktan kontrol edilebilir hale getirmek ile ilgili küçük bir düşüncemin sonucunda internetten &lt;strong&gt;SonOf
      
    
    </summary>
    
    
      <category term="SonOff Wifi Switch" scheme="http://www.erhanbaris.com/tags/SonOff-Wifi-Switch/"/>
    
      <category term="Akıllı Ev" scheme="http://www.erhanbaris.com/tags/Akilli-Ev/"/>
    
      <category term="eWeLink" scheme="http://www.erhanbaris.com/tags/eWeLink/"/>
    
  </entry>
  
  <entry>
    <title>Pimpl Idiom Nedir?</title>
    <link href="http://www.erhanbaris.com/tr/2018/03/24/Pimpl-Idiom-Nedir/"/>
    <id>http://www.erhanbaris.com/tr/2018/03/24/Pimpl-Idiom-Nedir/</id>
    <published>2018-03-24T09:11:33.000Z</published>
    <updated>2018-03-24T09:11:33.491Z</updated>
    
    <content type="html"><![CDATA[<p>Bir <a href="/tr/2018/03/23/object-oriented-bize-ne-gibi-yenilikler-getirdi/" title="önce ki">önce ki</a> yazıda OO dillerin iddialarından birisinin de kapsülleme özelliğinin olduğunu söylemiştik. Fakat tam olarak c dilinde ki gibi mükemmel bir sonuç elde edemediğimizi ve bunun için access modifiers(public, private, protected) kullanılması gerektiğinden bahsetmiştik. İşin kötü tarafı bunları kullanmak belli bir oranda sorunu çözsede header dosyasında bir düzenleme yaptığınız taktirde bunu referans alan diğer bütün kodlar zincirleme olarak tekrardan derlenmesine neden oluyor. En basitinden bir değişken bile eklemiş olsanız diğer dosyalarında derlenmesi gerekiyor. Eğer merkezi konumda ki bir dosyanızda düzenleme yaptıysanız ve projeniz büyük ise bu gerçektende can sıkıcı oluyor. Bu tarz durumlardan kurtulmak için tam bir yalıtılmışlık sağlamak için bütün görünür olan değişkenlerinizin header dosyasında gizlemeye ihtiyacınız oluyor. Bu soruna çözüm seçeneklerinden birisi <strong>Pimpl Idiom</strong>‘dur.<br>Pimpl Idiom ile kullanmanız gereken bütün private fonksiyon ve değişkenlerinizi başka bir class içerisine taşıyıp sadece cpp dosyası içerisinde tanımlamalarını yapıyorsunuz. Header içerisinde ise sadece horward declaration ile böyle bir sınıfınızın olduğunu belirtiyorsunuz, fakat bunun dışında içeriği konusunda hiçbir bilgi vermiyorsunuz.<br>Örnek olarak aşağıda ki gibi bir sınıfınızın olduğunu varsayalım.<br><script src="//gist.github.com/erhanbaris/b63375f88be3cc1be025b976f55b838a.js?file=AppServer_v1.hpp"></script></p><p>Örnek olarak isteklerin cachelenmesi için bir düzenleme yaptığınız takdirde bunu private olarak eklerseniz önceden de bahsettiğim gibi referanslarında derlenmesi gerekecek.</p><script src="//gist.github.com/erhanbaris/b63375f88be3cc1be025b976f55b838a.js?file=AppServer_v2.hpp"></script><p>Header içerisinde AppServerImpl isminde bir sınıfımızın olduğunu belirttik ve bunu AppServer içerisinde kullandığımızından bahsettik. Diğer bütün private olan şeylerimizin hepsini ortadan kaldırdık.</p><p>Bunu kullanacak olan yazılımcı/firmanın daha fazla bilgi edinmesini istemiyoruz. cpp dosyamız için tanımlamada aşağıda ki gibi olacaktır.<br><script src="//gist.github.com/erhanbaris/b63375f88be3cc1be025b976f55b838a.js?file=AppServer_v2.cpp"></script></p><p>AppServer sınıfı için gerekli bütün private değişkenler ile private methodların hepsini AppServerImpl içerisinde tanımlıyoruz. Ayrıca AppServer pointer bilgisini AppServerImpl sınıfında tanımladım. Bunun nedeni AppServerImpl içerisinde public metod yada değişkenlere erişebilmemi sağlaması içindi.<br>Eğer AppServer genel yapısı üzerinde düzenleme yapmam gerekirse (ki public olanları kast etmiyorum) diğer bütün referans alan kodları derlemem gerekmeyecek.<br>Kodlarını ne kadar gizlerseniz o kadar kolay değişiklikler yapabilir ve zaman kazanırsınız.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Bir &lt;a href=&quot;/tr/2018/03/23/object-oriented-bize-ne-gibi-yenilikler-getirdi/&quot; title=&quot;önce ki&quot;&gt;önce ki&lt;/a&gt; yazıda OO dillerin iddialarında
      
    
    </summary>
    
    
      <category term="c++" scheme="http://www.erhanbaris.com/tags/c/"/>
    
      <category term="pimpl" scheme="http://www.erhanbaris.com/tags/pimpl/"/>
    
      <category term="object-oritented" scheme="http://www.erhanbaris.com/tags/object-oritented/"/>
    
  </entry>
  
  <entry>
    <title>Object Oriented Bize Ne Gibi Yenilikler Getirdi?</title>
    <link href="http://www.erhanbaris.com/tr/2018/03/23/object-oriented-bize-ne-gibi-yenilikler-getirdi/"/>
    <id>http://www.erhanbaris.com/tr/2018/03/23/object-oriented-bize-ne-gibi-yenilikler-getirdi/</id>
    <published>2018-03-22T21:14:41.000Z</published>
    <updated>2018-03-24T11:05:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>Genel olarak bütün dillere baktığımız üç ana kısıma ayrılıyor,</p><ul><li>Structured</li><li>Object Oriented</li><li>Functional</li></ul><p>Ortaya çıkış sürelerine baktığımız zaman birbirlerine oldukça yakın olarak 1950-1960 civarında ortaya çıktı fakat son bir kaç yılda OO dillerin popüleritesi ve genel çevre tarafından görmüş olduu destek diğer bütün yapılara nazaran kat be kat arttı.<br>Özellikle C++, C# ve Java gibi dillerin sunmuş olduğu bu olanaklar programcıların aklını çelmekte kendi içinde bir gruplaşmalara bile sebep olmakta.</p><p>Peki OO dillerin bize tam olarak vaat ettiği nedir? Neden bizim için bu kadar önemli, kolay ve kullanışlılar.<br>Bir çok farklı kişi buna farklı cevaplar verebilir. <strong>Objeleri daha iyi yönetebilmek</strong>, <strong>gerçek dünyayı simule edebilmek</strong>, <strong>daha iyi yapılar oluşturabilmek</strong> vs gibi bu liste uzayıp gider. Fakat OO dillerin aslında çözüm olarak sunduğu şeyler 3 tanedir. </p><ul><li><strong>Encapsulation</strong></li><li><strong>Polymorphism</strong></li><li><strong>Inheritance</strong></li></ul><p>Bu 3 madde şu anda heryerde gözümüze sokulan, sürekli olarak anlatılan ve bize nimetlerinden sürekli olarak bir sihir gibi söz edilen şeyler gerçektende vaat edilkdiği gibi OO diller ile mi birlikte geldi? Bunları sadece OO diller aracılığı ile mi kullanabiliriz? Peki OO diller olmasaydı bunlara ihtiyacımızda olmayacakmıydı?</p><h2 id="Encapsulation"><a href="#Encapsulation" class="headerlink" title="Encapsulation"></a>Encapsulation</h2><p>En basit anlatımıyla sınıf içerisinde ki bilgilerin diğer kullanıcılar ve yapılardan saklanması ve tam bir yalıtılmışlık sağlama olarak tanımlanabilir. Dışarıya sadece bir erişim metodu(function pointer) yada sınıfı(abstract class) verilerek asıl yapının diğer dış erişimlere kapatılarak daha esnek değişiklikler, düzenlemeler yapılmasına imkan vermek için kullanılır. Kodun düzenlenmesi sonrasında o kodu kullanan diğer bütün yapının tekrardan derlenmesinin önüne geçilerek sadece değişikliğin olduğu kısmın derlenmesini sağlamaktır.</p><p>C dili için örnek göstermek gerekirse;<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// animal.h</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">animal</span>;</span></span><br><span class="line"><span class="function">struct animal* <span class="title">create_animal</span><span class="params">(<span class="keyword">int</span> size, <span class="keyword">int</span> kilo)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_information</span><span class="params">(struct animal *)</span></span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// animal.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Animal.h"</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">animal</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> size;</span><br><span class="line">    <span class="keyword">int</span> kilo;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">struct animal* <span class="title">create_animal</span><span class="params">(<span class="keyword">int</span> size, <span class="keyword">int</span> kilo)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">animal</span>* <span class="title">item</span> = (<span class="title">struct</span> <span class="title">animal</span>*)<span class="title">std</span>:</span>:<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct animal));</span><br><span class="line">    item-&gt;kilo = kilo;</span><br><span class="line">    item-&gt;size = size;</span><br><span class="line">    <span class="keyword">return</span> item;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_information</span><span class="params">(struct animal * item)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Kilo: %i, size: %i\r\n"</span>, item-&gt;kilo, item-&gt;size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Animal.h"</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">animal</span>* <span class="title">item</span> = <span class="title">create_animal</span>(50, 40);</span></span><br><span class="line">    print_information(item);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Aynı örneğin C++ ile gösterimi;<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// animal.hpp</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Animal(<span class="keyword">int</span> size, <span class="keyword">int</span> kilo);</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print_information</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> psize;</span><br><span class="line">    <span class="keyword">int</span> pkilo;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// animal.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Animal.hpp"</span></span></span><br><span class="line">Animal::Animal(<span class="keyword">int</span> size, <span class="keyword">int</span> kilo)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;psize = size;</span><br><span class="line">    <span class="keyword">this</span>-&gt;pkilo = kilo;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Animal::print_information()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Kilo: %i, size: %i\r\n"</span>, <span class="keyword">this</span>-&gt;pkilo, <span class="keyword">this</span>-&gt;psize);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Animal.hpp"</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">Animal <span class="title">item</span><span class="params">(<span class="number">50</span>,<span class="number">40</span>)</span></span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Printing as animal\r\n"</span>);</span><br><span class="line">    item.print_information();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Sonuç:<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Printing <span class="keyword">as</span> animal</span><br><span class="line"><span class="string">Kilo:</span> <span class="number">40</span>, <span class="string">size:</span> <span class="number">50</span></span><br></pre></td></tr></table></figure></p><p>Hımmm, sanki c ile c++ arasında çok fark yokmuş gibi görünüyor ama aslında bakacak olursanız c++ sınıf tanımlamasında bazı bilgilerin görünür olduğu anlaşılıyor. Bu da kapsüllemeyi bozan şeylerden birisi. Tabi bunu <strong>pimpl</strong> ile önüne geçilebilir ama genede dışarda bazı bilgileri bırakmış oluyor. Kapsülleme bakımından c, c++ oranla daha başarılı. </p><p>Fakat unutmamak lazım c++ içerisinde public, private ve protected tanımlamaları bu sorunu çözmek için oluşturulmuş ve bunlarla soruna belli bir düzeyde çözüme kavuşturabiliyoruz.<br>OO dillerinin önerdiği kapsülleme zaten uzun bir süreden beri var olan bir özellik.</p><h2 id="Polymorphism"><a href="#Polymorphism" class="headerlink" title="Polymorphism"></a>Polymorphism</h2><p>Kısacası nesnelerin birbiri yerine kullanılabilmesidir. Fark edelim bir elimizde belli bir kaynaktan veri okuyup bunu işleyen bir komuz var. Bu kaynakta bir dosya olsun. Eğer kodunuzu bu dosya formatına göre yazarsanız emin olun günün birinde çıkıpta daha farklı bir dosyadan, belkide bir web sitesinden veriyi okumanızı isteyecek. Bu durumda bir çok yeri değiştirmek yerine daha işin başında sınıfınızı yada işlem yapan metodu soyutlarsanız yeni özellik eklemeniz zahmetsiz olacaktır. Bunuda  interface/abstract sınıf aracılığı ile yada function pointer ile yapmanız gerekmektedir.. OO dil kullananların oldukça aşina olduğu bir durumdur. İşin gerçeği bunu c ilede rahatlıkla yapabilirsiniz.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// myapi.h</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MY_API</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span>(*calc)(<span class="keyword">int</span> a, <span class="keyword">int</span> y);</span><br><span class="line">    <span class="keyword">void</span>(*info)();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">struct MY_API <span class="title">create_sum_calculator</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">struct MY_API <span class="title">create_sub_calculator</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calculate</span><span class="params">(struct MY_API api, <span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// myapi.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"myapi.h"</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a - y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sum_info</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Sum\r\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sub_info</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Sub\r\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">struct MY_API <span class="title">create_sum_calculator</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">MY_API</span> <span class="title">calc</span> = &#123;</span> sum, sum_info &#125;;</span><br><span class="line">    <span class="keyword">return</span> calc;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">struct MY_API <span class="title">create_sub_calculator</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">MY_API</span> <span class="title">calc</span> = &#123;</span> sub, sub_info &#125;;</span><br><span class="line">    <span class="keyword">return</span> calc;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calculate</span><span class="params">(struct MY_API api, <span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    api.info();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"2 + 5 = %i\r\n"</span>, api.calc(<span class="number">2</span>,<span class="number">5</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Animal.h"</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">MY_API</span> <span class="title">sumCalc</span> = <span class="title">create_sum_calculator</span>();</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">MY_API</span> <span class="title">subCalc</span> = <span class="title">create_sub_calculator</span>();</span></span><br><span class="line">    </span><br><span class="line">    calculate(sumCalc, <span class="number">2</span>, <span class="number">5</span>);</span><br><span class="line">    calculate(subCalc, <span class="number">2</span>, <span class="number">5</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Sonuç:<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Sum</span><br><span class="line"><span class="number">2</span> + <span class="number">5</span> = <span class="number">7</span></span><br><span class="line">Sub</span><br><span class="line"><span class="number">2</span> - <span class="number">5</span> = <span class="number">-3</span></span><br></pre></td></tr></table></figure></p><p>Burada da linux çekirdeğinde ki fs.h dosyasından bir kod parçası. Şu an ki versiyonda çok daha uzun.<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">file_operations</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> (*lseek) (struct inode *, struct file *, <span class="keyword">off_t</span>, <span class="keyword">int</span>);</span><br><span class="line">    <span class="keyword">int</span> (*read) (struct inode *, struct file *, <span class="keyword">char</span> *, <span class="keyword">int</span>);</span><br><span class="line">    <span class="keyword">int</span> (*write) (struct inode *, struct file *, <span class="keyword">const</span> <span class="keyword">char</span> *, <span class="keyword">int</span>);</span><br><span class="line">    <span class="keyword">int</span> (*readdir) (struct inode *, struct file *, <span class="keyword">void</span> *, <span class="keyword">filldir_t</span>);</span><br><span class="line">    <span class="keyword">int</span> (*select) (struct inode *, struct file *, <span class="keyword">int</span>, select_table *);</span><br><span class="line">    <span class="keyword">int</span> (*ioctl) (struct inode *, struct file *, <span class="keyword">unsigned</span> <span class="keyword">int</span>, <span class="keyword">unsigned</span> <span class="keyword">long</span>);</span><br><span class="line">    <span class="keyword">int</span> (*mmap) (struct inode *, struct file *, struct vm_area_struct *);</span><br><span class="line">    <span class="keyword">int</span> (*open) (struct inode *, struct file *);</span><br><span class="line">    <span class="keyword">void</span> (*release) (struct inode *, struct file *);</span><br><span class="line">    <span class="keyword">int</span> (*fsync) (struct inode *, struct file *);</span><br><span class="line">    <span class="keyword">int</span> (*fasync) (struct inode *, struct file *, <span class="keyword">int</span>);</span><br><span class="line">    <span class="keyword">int</span> (*check_media_change) (<span class="keyword">kdev_t</span> dev);</span><br><span class="line">    <span class="keyword">int</span> (*revalidate) (<span class="keyword">kdev_t</span> dev);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>Sonuç gösteriyor ki polymorphism’de c dili için sorun değil. Tabi bunu yapabilmek için değişken tanımlamalarımızı aynı sıra ile ve türlerinin de aynı olması gerekiyor. RAM’da her iki nesnenin değişkenleri aynı sırada ve boyutta(türde) olması gerekiyor.<br>Ayrıca c++ arkaplanında buna benzer bir mekanizma kullanmaktadır. Virtual olarak tanımladığınız metodlar vtable(virtual method table) isimli bir yerde tutulur ve çağrım yağtığınızda fonksiyon bilgisi okunarak çalıştırılır. Yani c++ bu işlemleri sizin yerinize otomatik olarak yapar. Bu da hata yapma ihtimalinizi azaltır.</p><h2 id="Inheritance"><a href="#Inheritance" class="headerlink" title="Inheritance"></a>Inheritance</h2><p>Bir nesnenin metod yada değişkenlerinin bir başka nesne tarafından katılım yolu ile alarak kendi içerisinde barındırıyormuş gibi kullanılmasını sağlamak için kullanılmakta. Diğer kısımlarda söylemiş olduğum bu c içerisinde kolaylıkla kullanılabilir durumu ne yazık ki burada yok. Bu konuda farklı yöntemler var ama hiç biri tam olarak OO dillerde ki gibi esneklik sağlamıyor.</p><p>Aşağıda ki yöntem çok tercih edilmesede benzer bir yöntem uygulanabilir.<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// animal.h</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">animal</span>;</span></span><br><span class="line"><span class="function">struct animal* <span class="title">create_animal</span><span class="params">(<span class="keyword">int</span> size, <span class="keyword">int</span> kilo)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_information</span><span class="params">(struct animal *)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dog</span>;</span></span><br><span class="line"><span class="function">struct dog* <span class="title">create_dog</span><span class="params">(<span class="keyword">int</span> size, <span class="keyword">int</span> kilo, <span class="keyword">int</span> age)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_information</span><span class="params">(struct dog *)</span></span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// animal.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"animal.h"</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">animal</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> size;</span><br><span class="line">    <span class="keyword">int</span> kilo;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">struct animal* <span class="title">create_animal</span><span class="params">(<span class="keyword">int</span> size, <span class="keyword">int</span> kilo)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">animal</span>* <span class="title">item</span> = (<span class="title">struct</span> <span class="title">animal</span>*)<span class="title">std</span>:</span>:<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct animal));</span><br><span class="line">    item-&gt;kilo = kilo;</span><br><span class="line">    item-&gt;size = size;</span><br><span class="line">    <span class="keyword">return</span> item;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_information</span><span class="params">(struct animal * item)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Kilo: %i, size: %i\r\n"</span>, item-&gt;kilo, item-&gt;size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dog</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> size;</span><br><span class="line">    <span class="keyword">int</span> kilo;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">struct dog* <span class="title">create_dog</span><span class="params">(<span class="keyword">int</span> size, <span class="keyword">int</span> kilo, <span class="keyword">int</span> age)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">dog</span>* <span class="title">item</span> = (<span class="title">struct</span> <span class="title">dog</span>*)<span class="title">std</span>:</span>:<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct dog));</span><br><span class="line">    item-&gt;kilo = kilo;</span><br><span class="line">    item-&gt;size = size;</span><br><span class="line">    item-&gt;age = age;</span><br><span class="line">    <span class="keyword">return</span> item;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_information</span><span class="params">(struct dog * item)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Kilo: %i, size: %i, age: %i\r\n"</span>, item-&gt;kilo, item-&gt;size, item-&gt;age);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"animal.h"</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">dog</span>* <span class="title">d</span> = <span class="title">create_dog</span>(50, 40, 50);</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">animal</span>* <span class="title">a</span> = (<span class="title">struct</span> <span class="title">animal</span>*)<span class="title">d</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Printing as animal\r\n"</span>);</span><br><span class="line">print_information(a);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Printing as dog\r\n"</span>);</span><br><span class="line">print_information(d);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Sonuç:<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Printing <span class="keyword">as</span> animal</span><br><span class="line"><span class="string">Kilo:</span> <span class="number">40</span>, <span class="string">size:</span> <span class="number">50</span></span><br><span class="line">Printing <span class="keyword">as</span> dog</span><br><span class="line"><span class="string">Kilo:</span> <span class="number">40</span>, <span class="string">size:</span> <span class="number">50</span>, <span class="string">age:</span> <span class="number">50</span></span><br></pre></td></tr></table></figure></p><p>Evet bu o kadarda abstract sınıf kullanmaya benzemiyor. Farklı bir örnek ile devam edelim.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//source.h</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">source</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">source_ops</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> (*get)(<span class="keyword">void</span>* ptr);</span><br><span class="line">    <span class="keyword">void</span>(*put)(<span class="keyword">void</span>* ptr, <span class="keyword">int</span> data);</span><br><span class="line">    <span class="keyword">void</span>(*destroy)(<span class="keyword">void</span>*);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">struct source* <span class="title">create_source</span><span class="params">(struct source_ops* ops, <span class="keyword">void</span>* ptr)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">source_get</span><span class="params">(struct source* s)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">source_put</span><span class="params">(struct source* s, <span class="keyword">int</span> data)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">source_delete</span><span class="params">(struct source* s)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//source.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"source.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">source</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">source_ops</span>* <span class="title">ops</span>;</span></span><br><span class="line">    <span class="keyword">void</span>* data;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">struct source* <span class="title">create_source</span><span class="params">(struct source_ops* ops, <span class="keyword">void</span>* ptr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">source</span>* <span class="title">s</span> = (<span class="title">struct</span> <span class="title">source</span>*)<span class="title">malloc</span>(<span class="title">sizeof</span>(<span class="title">struct</span> <span class="title">source</span>));</span></span><br><span class="line">    s-&gt;data = ptr;</span><br><span class="line">    s-&gt;ops = ops;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">source_get</span><span class="params">(struct source* s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> s-&gt;ops-&gt;get(s-&gt;data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">source_put</span><span class="params">(struct source* s, <span class="keyword">int</span> data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    s-&gt;ops-&gt;put(s-&gt;data, data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">source_delete</span><span class="params">(struct source* s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    s-&gt;ops-&gt;destroy(s-&gt;data);</span><br><span class="line">    <span class="built_in">free</span>(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//tmp_source.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"source.h"</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tmp_source</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span>* datas;</span><br><span class="line">    <span class="keyword">int</span> datas_len;</span><br><span class="line">    <span class="keyword">int</span> index;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">struct source* <span class="title">create_tmp_source</span><span class="params">(<span class="keyword">int</span>* data, <span class="keyword">int</span> len)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">tmp_source_get</span><span class="params">(<span class="keyword">void</span>* ptr)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tmp_source_put</span><span class="params">(<span class="keyword">void</span>* ptr, <span class="keyword">int</span> data)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//tmp_source.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"tmp_source.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">struct source* <span class="title">create_tmp_source</span><span class="params">(<span class="keyword">int</span>* data, <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tmp_source</span>* <span class="title">s</span> = (<span class="title">struct</span> <span class="title">tmp_source</span>*)<span class="title">std</span>:</span>:<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct tmp_source));</span><br><span class="line">    s-&gt;index = <span class="number">0</span>;</span><br><span class="line">    s-&gt;datas = data;</span><br><span class="line">    s-&gt;datas_len = len;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">source_ops</span> <span class="title">ops</span> = &#123;</span></span><br><span class="line">        tmp_source_get,</span><br><span class="line">        tmp_source_put,</span><br><span class="line">        <span class="built_in">free</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> create_source(&amp;ops, s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">tmp_source_get</span><span class="params">(<span class="keyword">void</span>* ptr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tmp_source</span>* <span class="title">t</span> = (<span class="title">struct</span> <span class="title">tmp_source</span>*)<span class="title">ptr</span>;</span></span><br><span class="line">    <span class="keyword">if</span> (t-&gt;index &gt;= t-&gt;datas_len)</span><br><span class="line">        t-&gt;index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> item = t-&gt;datas[t-&gt;index++];</span><br><span class="line">    <span class="keyword">return</span> item;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tmp_source_put</span><span class="params">(<span class="keyword">void</span>* ptr, <span class="keyword">int</span> data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tmp_source</span>* <span class="title">t</span> = (<span class="title">struct</span> <span class="title">tmp_source</span>*)<span class="title">ptr</span>;</span></span><br><span class="line">    <span class="keyword">if</span> (t-&gt;index &gt;= t-&gt;datas_len)</span><br><span class="line">        t-&gt;index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    t-&gt;datas[t-&gt;index++] = data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"source.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"tmp_source.h"</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>* data = (<span class="keyword">int</span>*)<span class="built_in">std</span>::<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * <span class="number">255</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">255</span>; ++i)</span><br><span class="line">        data[i] = i;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">source</span>* <span class="title">s</span> = <span class="title">create_tmp_source</span>(<span class="title">data</span>, 255);</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"item -&gt; "</span> &lt;&lt; source_get(s) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"item -&gt; "</span> &lt;&lt; source_get(s) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"item -&gt; "</span> &lt;&lt; source_get(s) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"item -&gt; "</span> &lt;&lt; source_get(s) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"item -&gt; "</span> &lt;&lt; source_get(s) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"item -&gt; "</span> &lt;&lt; source_get(s) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"item -&gt; "</span> &lt;&lt; source_get(s) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"item -&gt; "</span> &lt;&lt; source_get(s) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Sonuç:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">item -&gt; <span class="number">0</span></span><br><span class="line">item -&gt; <span class="number">1</span></span><br><span class="line">item -&gt; <span class="number">2</span></span><br><span class="line">item -&gt; <span class="number">3</span></span><br><span class="line">item -&gt; <span class="number">4</span></span><br><span class="line">item -&gt; <span class="number">5</span></span><br><span class="line">item -&gt; <span class="number">6</span></span><br><span class="line">item -&gt; <span class="number">7</span></span><br></pre></td></tr></table></figure></p><p>Ana sınıf tanımlaması için farklı bir yöntemde aşağıda.<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">base</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">int</span> y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">derived</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">base</span> <span class="title">base</span>;</span></span><br><span class="line">    <span class="keyword">int</span> z;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">derived</span> <span class="title">d</span>;</span></span><br><span class="line"></span><br><span class="line">    d.base.x = <span class="number">1</span>;</span><br><span class="line">    d.base.y = <span class="number">2</span>;</span><br><span class="line">    d.z = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"x=%i, y=%i, z=%i\r\n"</span>, d.base.x, d.base.y, d.z);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Evet ne kadar çok üzerinde çalışırsak çalışalım tam olarak inheritance mantığını uygulamak kolay olmuyor. Son örneğimizde kapsüllemeden ödün vermek zorunda kaldık. Bu da oldukça önemli bir durum. </p><p>C++ ilk geliştirildiği zaman makine koduna derleme yapmak yerine C diline çıktı verip, c kodu olarak derlenmekteydi. Tabi o zamanlarda ki C++ ve C şu andakinden oldukça farklıydı. Özellikle C++’ın yetkinlikleri oldukça arttı. </p><h3 id="Peki-butun-bunlar-zaten-var-ise-bize-ne-gibi-bir-faydasi-dokundu"><a href="#Peki-butun-bunlar-zaten-var-ise-bize-ne-gibi-bir-faydasi-dokundu" class="headerlink" title="Peki bütün bunlar zaten var ise bize ne gibi bir faydası dokundu?"></a>Peki bütün bunlar zaten var ise bize ne gibi bir faydası dokundu?</h3><ul><li>Öncelikle daha güvenli bir geliştirme ortamı sağladı. Üst kısımda göstermiş olduğum bir çok şeyde hata yapma riski yüksek ve eğer hata yapılırsa bulunmasıda zor.</li><li>Yazılım geliştirmeyi daha kolay hale getirdi.</li><li>Nesneler arasında ki ikişki ve iletişimi daha anlaşılır kıldı.</li><li>Kalıtım sistemini çok daha doğru olarak kullanılmasını sağladı.<br>Eminim ki daha bir çok faydası var fakat hepsini sıralamak olanaksız.</li></ul><p>OO diller bize vaat ettiği kadar yenilik sunmasada sağlamış olduğu esneklik bile kullanımı için yeterli. Her ne kadar c dilinin özelliklerinden bol bol bahsetsemde, şu anda projelerimde yoğun olarak c++ ve c# kullanıyorum. Bir yazılımcı olarak ilk tercihim her zaman OO dillerden birisi olacaktır :)</p><p><strong>NOT: örnek kodlar tamamen test amaçlıdır, memory management yada bug’lar önemsenmemiştir. </strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Genel olarak bütün dillere baktığımız üç ana kısıma ayrılıyor,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Structured&lt;/li&gt;
&lt;li&gt;Object Oriented&lt;/li&gt;
&lt;li&gt;Functional&lt;/li&gt;

      
    
    </summary>
    
    
      <category term="OO" scheme="http://www.erhanbaris.com/tags/OO/"/>
    
      <category term="C" scheme="http://www.erhanbaris.com/tags/C/"/>
    
      <category term="C++" scheme="http://www.erhanbaris.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Sanal Makineler</title>
    <link href="http://www.erhanbaris.com/tr/2018/03/21/Sanal-Makineler/"/>
    <id>http://www.erhanbaris.com/tr/2018/03/21/Sanal-Makineler/</id>
    <published>2018-03-21T07:35:12.000Z</published>
    <updated>2018-03-24T09:13:16.640Z</updated>
    
    <content type="html"><![CDATA[<p>Sanal makineler heryerde. Telefonumuzda, bilgisayarımızda, arabamızda, televizyonumuzda. Heryerde. Hemde düşünüldüğü gibi Vmware, VirtualBox, Hyper-V gibi işletim sistemi sanallaştırma gibi kısıtlı bir alanda değil, daha geniş kesimlerce fark etmeden kullanılıyor. Eğer yazılım geliştiriyorsanız yada yazılım ile uğraşıyorsanız emin olun onu kullanıyorsunuz.<br>Çoğu programlama dili kendi özel sanal makinesi üzerinde işlemler yapmakta. Bunun belkide en çok bilineni JVM’dir. Yazmış olduğunuz Java kodları derleyiciler ile birlikte opcode’lara çevrilir ve bunu Java Sanal Makinesi yorumlayarak sizin programınızı yürütür. Tabi işlem en basit olarak bu şekilde tanımlanabilir. Diğer yandan MSIL’de aynı şekilde sanala makine üzerinde çalışmakta ve yazmış olduğunuz kodlar sanal makine tarafından yorumlanmakta. JVM yada .Net Platformu dışında Python, Ruby, PHP gibi diğer dillerde performans için sanal makine üzerinde işlemler yapmakta fakat JVM ile ayrılabilecek en önemli noktaları JVM’de opcode’lar JIT derleyicisi ile ilk çalıştırma esnasında makine koduna çevrilmekte ve daha yüksek performans sağlamakta. </p><p>Diller genel olarak işlem yürütme mekanizmasına göre 3’e ayrılıyorlar.</p><ol><li>AST ile her işlem için yapı tekrar tekrar çalıştırılır.</li><li>Sanal makineler ile üst düzeyde yazılan kodlar daha hızlı yürütülmek için makine diline benzer ara bir formata çevrilir o şekilde yorumlanır.</li><li>JIT derleyiciler ile yazılan kodlar çalıştırıldığı ilk anda makine diline çevrilir ve o şekilde çalıştırılır.</li><li>Son ve en performanslı olan yöntem ile kodlarımız makine diline çevrilir ve böylece en iyi performansı sağlamış olursunuz.</li></ol><p>İlkinden sonuncusuna doğru gidildiğinde performans ciddi anlamda artar. Çoğu dil ikinci maddede ki gibi sanal makine üzerinden işlem yaptırmakta. Bende şu anda sadece 2. madde ile ilgileniyorum.<br>Sanal makine konsepti kendi içerisinde iki farklı şekilde uygulanıyor. İlki stack tabanlı, ikiniside register tabanlı makineler. Gerçekte buna sanal makineden ziyade sanal cpu olarakta bakılabilir. Assemblr gibi ara bir dile çevirdiğimiz kodları yorumlayarak süreçleri ilerletiyor.<br>Stack ve register tabanlı sanal makinelerin farklarını kısaca özetlersek;</p><ol><li>Stack yapısını oluşturmak ve anlamak yazılımcı için daha kolaydır. Register tabanlı sistemlerde yapıyı kurgulamak daha karmaşıktır.</li><li>Performans olarak register yapısı öne çıkmakta. Bunun nedenide daha az opcode üretilerek daha az işlem ile aynı sonuca ulaşılmaktadır.</li><li>Register tabanlı sistemde daha az komut kodu vardır.</li></ol><h2 id="DEVAM-EDECEK"><a href="#DEVAM-EDECEK" class="headerlink" title="DEVAM EDECEK"></a>DEVAM EDECEK</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Sanal makineler heryerde. Telefonumuzda, bilgisayarımızda, arabamızda, televizyonumuzda. Heryerde. Hemde düşünüldüğü gibi Vmware, Virtual
      
    
    </summary>
    
    
      <category term="Sanal-Makine" scheme="http://www.erhanbaris.com/tags/Sanal-Makine/"/>
    
      <category term="VM" scheme="http://www.erhanbaris.com/tags/VM/"/>
    
  </entry>
  
</feed>
